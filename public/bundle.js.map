{"version":3,"file":"bundle.js","sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/vec3.js","../src/utils.js","../src/simulation/mac-grid.js","../src/simulation/particles.js","../src/simulation/pressure-solve.js","../src/simulation/kernels/add-gravity.js","../src/simulation/kernels/advect-particles.js","../src/simulation/kernels/classify-voxels.js","../src/simulation/kernels/copy-kernel.js","../src/simulation/kernels/enforce-boundary-conditions.js","../src/simulation/kernels/transfer-particle-to-grid.js","../src/simulation/kernels/transfer-grid-to-particles.js","../src/simulation/kernels/pressure-solve/vector-math.js","../src/simulation/kernels/pressure-solve/build-coefficient-matrix.js","../src/simulation/kernels/pressure-solve/negative-divergence.js","../src/simulation/kernels/pressure-solve/flatten.js","../src/simulation/kernels/pressure-solve/apply-a.js","../src/simulation/kernels/velocity-update.js","../src/simulation/kernels/pressure-solve/jacobi-iteration.js","../src/simulation/kernels/kernels.js","../src/simulation/simulation.js","../src/main.js"],"sourcesContent":["/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","/**\n * Create a new 3D array of zeros with the given dimensions.\n *\n * @param {number} x x dimension length\n * @param {number} y y dimension length\n * @param {number} z z dimension length\n * @returns The new array, all values set to zero.\n */\nexport const initialize3DArray = (x, y, z) => {\n  let a = [];\n  for (let i = 0; i < x; i++) {\n    a.push([]);\n    for (let j = 0; j < y; j++) {\n      a[i].push(new Float32Array(z));\n    }\n  }\n  a.toArray = function() {return this;}\n  return a;\n};\n","import { vec3 } from \"gl-matrix\";\nimport { initialize3DArray } from \"../utils.js\";\n\n/** Enum for voxel states. */\nexport const STATE_ENUM = {\n  AIR: 0,\n  FLUID: 1,\n  SOLID: 2,\n};\n\n/**\n * Represent a MAC grid and the quantities associated with it. See Bridson,\n * 2015, chapter 2 for details on the structure of the grid. Pressures are\n * stored at the center of each voxel, and normal velocities are stored at the\n * boundaries on the voxels.\n */\nexport class MACGrid {\n  /**\n   * Construct a new MAC grid with the given specification. This grid\n   * construction is based off of Austin Eng's representation.\n   *\n   * @param {{min: vec3, max: vec3}} boundaries The bounds of the grid.\n   * @param {number} cellSize The width of each voxel.\n   */\n  constructor(boundaries, cellSize) {\n    this.min = boundaries.min;\n    this.max = boundaries.max;\n\n    // adjust the max extent to align to an integer number of cells\n    vec3.set(\n      this.max,\n      this.min[0] +\n        cellSize * Math.ceil((this.max[0] - this.min[0]) / cellSize),\n      this.min[1] +\n        cellSize * Math.ceil((this.max[1] - this.min[1]) / cellSize),\n      this.min[2] + cellSize * Math.ceil((this.max[2] - this.min[2]) / cellSize)\n    );\n\n    this.cellSize = cellSize;\n    this.count = vec3.create();\n    this.size = vec3.create();\n    vec3.sub(this.size, this.max, this.min);\n    vec3.scale(this.count, this.size, 1.0 / this.cellSize);\n    vec3.add(this.count, this.count, vec3.fromValues(1, 1, 1));\n    vec3.floor(this.count, this.count);\n\n    /// initialize\n    this.nx = this.count[0] - 1;\n    this.ny = this.count[1] - 1;\n    this.nz = this.count[2] - 1;\n    this.pressure = initialize3DArray(this.nx, this.ny, this.nz);\n    this.pressureOld = initialize3DArray(this.nx, this.ny, this.nz);\n    this.velocityX = null;\n    this.velocityXOld = null;\n    this.velocityY = null;\n    this.velocityYOld = null;\n    this.velocityZ = null;\n    this.velocityZOld = null;\n\n    // initialize voxel states\n    this.voxelStates = initialize3DArray(this.nx, this.ny, this.nz);\n\n    console.log(\n      `Created a MAC grid with dimensions (${this.nx}, ${this.ny}, ${this.nz}).`\n    );\n  }\n\n  /**\n   * Set all voxels on the boundary of the grid to be solids. Leave everything\n   * else untouched (by default, air).\n   */\n  addDefaultSolids() {\n    for (let i = 0; i < this.nx; i++) {\n      for (let j = 0; j < this.ny; j++) {\n        for (let k = 0; k < this.nz; k++) {\n          if (\n            i === 0 ||\n            j === 0 ||\n            k === 0 ||\n            i === this.nx - 1 ||\n            j === this.ny - 1 ||\n            k === this.nz - 1\n          ) {\n            this.voxelStates[i][j][k] = STATE_ENUM.SOLID;\n          }\n        }\n      }\n    }\n  }\n}\n","export const ATTRIBUTE_COUNT = 6;\n\n/**\n * Represent the particle cloud.\n */\nexport class Particles {\n  /**\n   * Create a set of particles. The density of the particles determines how\n   * many are made, and the bounds determine the initial position of the\n   * particles. They start out evenly distributed throughout this box.\n   *\n   * @param {number} density\n   * @param {{min: vec3, max: vec3}} bounds The initial minimum and maximum\n   * extent of the box of particles.\n   */\n  constructor(density, bounds) {\n    this.particleBuffer = [];\n    this.particleIndices = [];\n    let particle_counter = 0;\n    let gap_between = 1 / Math.cbrt(density);\n    for (let x = bounds.min[0]; x < bounds.max[0]; x += gap_between) {\n      for (let y = bounds.min[1]; y < bounds.max[1]; y += gap_between) {\n        for (let z = bounds.min[2]; z < bounds.max[2]; z += gap_between) {\n          // push initial particle quantities\n          this.particleBuffer.push(x); // initial position\n          this.particleBuffer.push(y);\n          this.particleBuffer.push(z);\n          this.particleBuffer.push(0); // initial velocity\n          this.particleBuffer.push(0);\n          this.particleBuffer.push(0);\n\n          // push particles indices\n          this.particleIndices.push(particle_counter++ * ATTRIBUTE_COUNT);\n        }\n      }\n    }\n    console.log(`Created ${this.count()} particles.`);\n  }\n\n  /**\n   * @returns The count of particles in the cloud.\n   */\n  count() {\n    return this.particleBuffer.length / ATTRIBUTE_COUNT;\n  }\n\n  /**\n   * Get the ith particle from the buffer.\n   *\n   * @param {number} i The index of the particle to retrieve.\n   * @returns The particle as an object.\n   */\n  get(i) {\n    if (i < 0 || i >= this.count()) {\n      console.error(\"Index out of bounds in particle buffer!\");\n      return null;\n    }\n\n    return {\n      x_position: this.particleBuffer[ATTRIBUTE_COUNT * i],\n      y_position: this.particleBuffer[ATTRIBUTE_COUNT * i + 1],\n      z_position: this.particleBuffer[ATTRIBUTE_COUNT * i + 2],\n      x_velocity: this.particleBuffer[ATTRIBUTE_COUNT * i + 3],\n      y_velocity: this.particleBuffer[ATTRIBUTE_COUNT * i + 4],\n      z_velocity: this.particleBuffer[ATTRIBUTE_COUNT * i + 5],\n    };\n  }\n}\n","export const solve = (\n  kernels,\n  voxelStates,\n  dt,\n  velocityX,\n  velocityY,\n  velocityZ,\n  tolerance,\n  iterationLimit,\n  pressure,\n  pressureOld\n) => {\n  let p = pressureOld;\n\n  const d = kernels.buildD(voxelStates, velocityX, velocityY, velocityZ);\n\n  // JACOBI ITERATION\n  for (let i = 0; i < iterationLimit; i++) {\n    p = kernels.jacobi(d, p, voxelStates);\n  }\n\n  return p;\n};\n","export const createAddGravityKernel = (gpu, nx, ny, nz) =>\n  gpu\n    .createKernel(function (velocity_y, dt, voxelStates) {\n      return (\n        velocity_y[this.thread.z][this.thread.y][this.thread.x] - dt * 1.81\n      );\n    })\n    .setOutput([nx, ny, nz]);\n","import { ATTRIBUTE_COUNT } from \"../particles.js\";\n\nexport const createAdvectParticlesKernel = (\n  gpu,\n  particleCount,\n  cellSize,\n  nx,\n  ny,\n  nz\n) =>\n  gpu\n    .createKernel(function (\n      particles,\n      dt,\n      velocityFieldX,\n      velocityFieldY,\n      velocityFieldZ\n    ) {\n      // check which position component we're looking at\n      if (this.thread.x % this.constants.ATTRIBUTE_COUNT === 0) {\n        // get position\n        let x = particles[this.thread.x];\n        let y = particles[this.thread.x + 1];\n        let z = particles[this.thread.x + 2];\n\n        // get x velocity\n        let vx = particles[this.thread.x + 3];\n\n        return x + dt * vx;\n\n        // carry out 2nd order Runge-Kutta solver in one dimension\n        let k1 = dt * vx;\n        let xIntermediate = x + k1 / 2;\n\n        // interpolate the velocity at the intermediate x value\n        let lerpWeight =\n          (xIntermediate -\n            Math.floor(xIntermediate) * this.constants.CELL_SIZE) /\n          this.constants.CELL_SIZE;\n        let vxIntermediate = lerp(\n          velocityFieldX[Math.floor(z / this.constants.CELL_SIZE)][\n            Math.floor(y / this.constants.CELL_SIZE)\n          ][Math.floor(xIntermediate / this.constants.CELL_SIZE)],\n          velocityFieldX[Math.floor(z / this.constants.CELL_SIZE)][\n            Math.floor(y / this.constants.CELL_SIZE)\n          ][Math.ceil(xIntermediate / this.constants.CELL_SIZE)],\n          lerpWeight\n        );\n        let k2 = dt * vxIntermediate;\n        let projectedPosition = x + k2;\n        if (projectedPosition <= 0) {\n          projectedPosition = 0.01;\n        } else if (\n          projectedPosition >=\n          this.constants.NX * this.constants.CELL_SIZE\n        ) {\n          projectedPosition =\n            this.constants.NX * this.constants.CELL_SIZE - 0.01;\n        }\n        return projectedPosition;\n      } else if (this.thread.x % this.constants.ATTRIBUTE_COUNT === 1) {\n        // get position\n        let x = particles[this.thread.x - 1];\n        let y = particles[this.thread.x];\n        let z = particles[this.thread.x + 1];\n\n        // get y velocity\n        let vy = particles[this.thread.x + 3];\n\n        return y + dt * vy;\n\n        // carry out 2nd order Runge-Kutta solver in one dimension\n        let k1 = dt * vy;\n        let yIntermediate = y + k1 / 2;\n\n        // interpolate the velocity at the intermediate y value\n        let lerpWeight =\n          (yIntermediate -\n            Math.floor(yIntermediate) * this.constants.CELL_SIZE) /\n          this.constants.CELL_SIZE;\n        let vyIntermediate = lerp(\n          velocityFieldY[Math.floor(z / this.constants.CELL_SIZE)][\n            Math.floor(yIntermediate / this.constants.CELL_SIZE)\n          ][Math.floor(x / this.constants.CELL_SIZE)],\n          velocityFieldY[Math.floor(z / this.constants.CELL_SIZE)][\n            Math.ceil(yIntermediate / this.constants.CELL_SIZE)\n          ][Math.floor(x / this.constants.CELL_SIZE)],\n          lerpWeight\n        );\n        let k2 = dt * vyIntermediate;\n        let projectedPosition = y + k2;\n        if (projectedPosition <= 0) {\n          projectedPosition = 0.01;\n        } else if (\n          projectedPosition >=\n          this.constants.NY * this.constants.CELL_SIZE\n        ) {\n          projectedPosition =\n            this.constants.NY * this.constants.CELL_SIZE - 0.01;\n        }\n        return projectedPosition;\n      } else if (this.thread.x % this.constants.ATTRIBUTE_COUNT === 2) {\n        // get position\n        let x = particles[this.thread.x - 2];\n        let y = particles[this.thread.x - 1];\n        let z = particles[this.thread.x];\n\n        // get z velocity\n        let vz = particles[this.thread.x + 3];\n\n        return z + dt * vz;\n\n        // carry out 2nd order Runge-Kutta solver in one dimension\n        let k1 = dt * vz;\n        let zIntermediate = z + k1 / 2;\n\n        // interpolate the velocity at the intermediate z value\n        let lerpWeight =\n          (zIntermediate -\n            Math.floor(zIntermediate) * this.constants.CELL_SIZE) /\n          this.constants.CELL_SIZE;\n        let vzIntermediate = lerp(\n          velocityFieldZ[Math.floor(zIntermediate / this.constants.CELL_SIZE)][\n            Math.floor(y / this.constants.CELL_SIZE)\n          ][Math.floor(x / this.constants.CELL_SIZE)],\n          velocityFieldZ[Math.ceil(zIntermediate / this.constants.CELL_SIZE)][\n            Math.floor(y / this.constants.CELL_SIZE)\n          ][Math.floor(x / this.constants.CELL_SIZE)],\n          lerpWeight\n        );\n        let k2 = dt * vzIntermediate;\n        let projectedPosition = z + k2;\n        if (projectedPosition <= 0) {\n          projectedPosition = 0.01;\n        } else if (\n          projectedPosition >=\n          this.constants.NZ * this.constants.CELL_SIZE\n        ) {\n          projectedPosition =\n            this.constants.NZ * this.constants.CELL_SIZE - 0.01;\n        }\n        return projectedPosition;\n      } else {\n        // don't change the velocities\n        return particles[this.thread.x];\n      }\n    })\n    .addFunction(function lerp(a, b, t) {\n      return (1 - t) * a + t * b;\n    })\n    .setConstants({\n      ATTRIBUTE_COUNT: ATTRIBUTE_COUNT,\n      CELL_SIZE: cellSize,\n      NX: nx,\n      NY: ny,\n      NZ: nz,\n    })\n    .setOutput([ATTRIBUTE_COUNT * particleCount]);\n","import { STATE_ENUM } from \"../mac-grid.js\";\n\nexport const createClassifyVoxelsKernel = (gpu, particleCount, nx, ny, nz) =>\n  gpu\n    .createKernel(function (voxelStates, particles, cellSize) {\n      // get spatial location of grid\n      let x = cellSize * this.thread.x;\n      let y = cellSize * this.thread.y;\n      let z = cellSize * this.thread.z;\n\n      let particle_exists = false;\n      for (let i = 0; i < this.constants.particleCount; i++) {\n        let pos_x = particles[i * 6];\n        let pos_y = particles[i * 6 + 1];\n        let pos_z = particles[i * 6 + 2];\n        // check if there is a particle in that grid\n        if (\n          pos_x - x <= cellSize &&\n          pos_x - x > 0 &&\n          pos_y - y <= cellSize &&\n          pos_y - y > 0 &&\n          pos_z - z <= cellSize &&\n          pos_z - z > 0\n        ) {\n          particle_exists = true;\n          break;\n        }\n      }\n      // set any cell with a particle in it that isn't solid to fluid\n      // any cell without a particle or solid is air\n      if (particle_exists) {\n        if (\n          voxelStates[this.thread.z][this.thread.y][this.thread.x] !==\n          this.constants.SOLID\n        ) {\n          return this.constants.FLUID;\n        } else {\n          return this.constants.SOLID;\n        }\n      } else {\n        // if there isn't, and the state is fluid, flip it to air\n        if (\n          voxelStates[this.thread.z][this.thread.y][this.thread.x] !==\n          this.constants.SOLID\n        ) {\n          return this.constants.AIR;\n        } else {\n          return this.constants.SOLID;\n        }\n      }\n    })\n    .setConstants({\n      particleCount: particleCount,\n      AIR: STATE_ENUM.AIR,\n      FLUID: STATE_ENUM.FLUID,\n      SOLID: STATE_ENUM.SOLID,\n    })\n    .setOutput([nx, ny, nz]);\n","export const createCopyKernel = (gpu, nx, ny, nz) =>\n  gpu\n    .createKernel(function (array) {\n      return array[this.thread.z][this.thread.y][this.thread.x];\n    })\n    .setOutput([nx, ny, nz]);\n","/**\n * Assumption!\n * This assumes that we're using the default arrangement of having all solid\n * voxels around the edge of our rectangular domain.\n */\n\nexport const createEnforceBoundaryXKernel = (gpu, nx, ny, nz) =>\n  gpu\n    .createKernel(function (velocities) {\n      if (this.thread.x === 0 || this.thread.x === this.constants.nx - 1) {\n        return 0;\n      }\n      return velocities[this.thread.z][this.thread.y][this.thread.x];\n    })\n    .setConstants({ nx: nx })\n    .setOutput([nx, ny, nz]);\n\nexport const createEnforceBoundaryYKernel = (gpu, nx, ny, nz) =>\n  gpu\n    .createKernel(function (velocities) {\n      if (this.thread.y === 0 || this.thread.y === this.constants.ny - 1) {\n        return 0;\n      }\n      return velocities[this.thread.z][this.thread.y][this.thread.x];\n    })\n    .setConstants({ ny: ny })\n    .setOutput([nx, ny, nz]);\n\nexport const createEnforceBoundaryZKernel = (gpu, nx, ny, nz) =>\n  gpu\n    .createKernel(function (velocities) {\n      if (this.thread.z === 0 || this.thread.z === this.constants.nz - 1) {\n        return 0;\n      }\n      return velocities[this.thread.z][this.thread.y][this.thread.x];\n    })\n    .setConstants({ nz: nz })\n    .setOutput([nx, ny, nz]);\n","/**\n * Transfer particle velocities to the grid. See Bridson, section 7.6 on\n * particle methods.\n */\n\n/**\n * How to parallelize?\n *\n *\n * for each particle:\n *  - get position of particle\n *  - find grid edges within dx\n *  for each of these edges:\n *      - add velocity * weight\n *      - where weight is given as triangle function\n */\nexport const createParticleToGridKernel = (\n  gpu,\n  particleCount,\n  nx,\n  ny,\n  nz,\n  dimension\n) =>\n  gpu\n    .createKernel(function (particles, cellSize) {\n      // get spatial location of grid velocity vector\n      let x = cellSize * this.thread.x;\n      let y = cellSize * this.thread.y;\n      let z = cellSize * this.thread.z;\n\n      // declare numerator and denominator of the weighted sum\n      let numerator = 0;\n      let denominator = 0;\n      /* loop through particles to find ones that are close, add their\n      velocity contribution to the grid velocity */\n      for (\n        let particleIndex = 0;\n        particleIndex < this.constants.PARTICLE_COUNT;\n        particleIndex++\n      ) {\n        // calculate distance in each dimension\n        let distance_x = particles[particleIndex * 6] - x;\n        let distance_y = particles[particleIndex * 6 + 1] - y;\n        let distance_z = particles[particleIndex * 6 + 2] - z;\n\n        // if it's far, skip it\n        if (\n          Math.abs(distance_x) > cellSize ||\n          Math.abs(distance_y) > cellSize ||\n          Math.abs(distance_z) > cellSize\n        ) {\n          continue;\n        }\n\n        // calculate the weight according to the trilinear interpolation\n        let weight =\n          triangle(distance_x / cellSize) *\n          triangle(distance_y / cellSize) *\n          triangle(distance_z / cellSize);\n\n        numerator +=\n          particles[particleIndex * 6 + 3 + this.constants.DIMENSION] * weight;\n        denominator += weight;\n      }\n\n      // check for divide by zero\n      if (Math.abs(denominator) < 0.0001) {\n        return 0;\n      }\n      return numerator / denominator;\n    })\n    .addFunction(function triangle(r) {\n      let r_magnitude = Math.abs(r);\n      if (r_magnitude >= 1) {\n        return 0;\n      }\n      return 1 - r_magnitude;\n    })\n    .setConstants({ PARTICLE_COUNT: particleCount, DIMENSION: dimension })\n    .setOutput([nx, ny, nz]);\n","import { ATTRIBUTE_COUNT } from \"../particles.js\";\n\n// kernel for subracting the new grid velocities from the old grid velocities\nconst createGridVelocityDifferenceKernel = (gpu, nx, ny, nz) =>\n  gpu\n    .createKernel(function (oldVelocities, newVelocities) {\n      return (\n        newVelocities[this.thread.z][this.thread.y][this.thread.x] -\n        oldVelocities[this.thread.z][this.thread.y][this.thread.x]\n      );\n    })\n    .setOutput([nx, ny, nz]);\n\n// FLIP Kernel\nconst createFLIPKernel = (gpu, particleCount, cellSize) =>\n  gpu\n    .createKernel(function (\n      particles,\n      diffGridVx,\n      diffGridVy,\n      diffGridVz,\n      oldVx,\n      oldVy,\n      oldVz\n    ) {\n      // mod to figure out which index we are at (0-5) for each particle\n      let index_mod = this.thread.x % this.constants.ATTRIBUTE_COUNT;\n      // if we are looking at the position just return the position\n      if (index_mod === 0 || index_mod === 1 || index_mod === 2) {\n        return particles[this.thread.x];\n      }\n      // get the positions - index changes depending which velocity we are looking at\n      let pos_x = particles[this.thread.x - index_mod];\n      let pos_y = particles[this.thread.x - index_mod + 1];\n      let pos_z = particles[this.thread.x - index_mod + 2];\n      // get the lower and upper grid positions\n      let grid_lower_x = Math.floor(pos_x / this.constants.CELL_SIZE);\n      let grid_upper_x = Math.ceil(pos_x / this.constants.CELL_SIZE);\n      let grid_lower_y = Math.floor(pos_y / this.constants.CELL_SIZE);\n      let grid_upper_y = Math.ceil(pos_y / this.constants.CELL_SIZE);\n      let grid_lower_z = Math.floor(pos_z / this.constants.CELL_SIZE);\n      let grid_upper_z = Math.ceil(pos_z / this.constants.CELL_SIZE);\n      let alpha = 0.95;\n      if (index_mod === 3) {\n        // vx\n        // get the lerp weight and return the lerp'd velocity\n        let lerpWeight =\n          (pos_x - grid_lower_x * this.constants.CELL_SIZE) /\n          this.constants.CELL_SIZE;\n        return lerp(\n        lerp(\n          diffGridVx[grid_lower_z][grid_lower_y][grid_lower_x]+oldVx[grid_lower_z][grid_lower_y][grid_lower_x],\n          diffGridVx[grid_lower_z][grid_lower_y][grid_upper_x]+oldVx[grid_lower_z][grid_lower_y][grid_upper_x],\n          lerpWeight\n        ),(\n          lerp(\n            oldVx[grid_lower_z][grid_lower_y][grid_lower_x],\n            oldVx[grid_lower_z][grid_lower_y][grid_upper_x],\n            lerpWeight\n          ) +\n          lerp(\n            diffGridVx[grid_lower_z][grid_lower_y][grid_lower_x],\n            diffGridVx[grid_lower_z][grid_lower_y][grid_upper_x],\n            lerpWeight\n          )\n        ),alpha);\n      } else if (index_mod === 4) {\n        // vy\n        // get the lerp weight and return the lerp'd velocity\n        let lerpWeight =\n          (pos_y - grid_lower_y * this.constants.CELL_SIZE) /\n          this.constants.CELL_SIZE;\n        return lerp(\n          lerp(\n            diffGridVy[grid_lower_z][grid_lower_y][grid_lower_x]+oldVy[grid_lower_z][grid_lower_y][grid_lower_x],\n            diffGridVy[grid_lower_z][grid_upper_y][grid_lower_x]+oldVy[grid_lower_z][grid_upper_y][grid_lower_x],\n            lerpWeight)\n          ,\n          (lerp(\n            oldVy[grid_lower_z][grid_lower_y][grid_lower_x],\n            oldVy[grid_lower_z][grid_upper_y][grid_lower_x],\n            lerpWeight\n          ) +\n          lerp(\n            diffGridVy[grid_lower_z][grid_lower_y][grid_lower_x],\n            diffGridVy[grid_lower_z][grid_upper_y][grid_lower_x],\n            lerpWeight\n          )\n        ),alpha);\n      } else if (index_mod === 5) {\n        // vz\n        // get the lerp weight and return the lerp'd velocity\n        let lerpWeight =\n          (pos_z - grid_lower_z * this.constants.CELL_SIZE) /\n          this.constants.CELL_SIZE;\n        return lerp(\n          lerp(\n            diffGridVz[grid_lower_z][grid_lower_y][grid_lower_x]+oldVz[grid_lower_z][grid_lower_y][grid_lower_x],\n            diffGridVz[grid_upper_z][grid_lower_y][grid_lower_x]+oldVz[grid_upper_z][grid_lower_y][grid_lower_x],\n            lerpWeight)\n          ,(\n          lerp(\n            oldVz[grid_lower_z][grid_lower_y][grid_lower_x],\n            oldVz[grid_upper_z][grid_lower_y][grid_lower_x],\n            lerpWeight\n          ) +\n          lerp(\n            diffGridVz[grid_lower_z][grid_lower_y][grid_lower_x],\n            diffGridVz[grid_upper_z][grid_lower_y][grid_lower_x],\n            lerpWeight\n          )\n        ),alpha);\n      }\n    })\n    .addFunction(function lerp(a, b, t) {\n      return (1 - t) * a + t * b;\n    })\n    .setConstants({ ATTRIBUTE_COUNT: ATTRIBUTE_COUNT, CELL_SIZE: cellSize })\n    .setOutput([particleCount * ATTRIBUTE_COUNT]);\n\nexport const createGridToParticlesKernel = (\n  gpu,\n  particleCount,\n  nx,\n  ny,\n  nz,\n  cellSize\n) => {\n  const velocityXDifference = createGridVelocityDifferenceKernel(\n    gpu,\n    nx + 1,\n    ny,\n    nz\n  ).setPipeline(true);\n\n  const velocityYDifference = createGridVelocityDifferenceKernel(\n    gpu,\n    nx,\n    ny + 1,\n    nz\n  ).setPipeline(true);\n\n  const velocityZDifference = createGridVelocityDifferenceKernel(\n    gpu,\n    nx,\n    ny,\n    nz + 1\n  ).setPipeline(true);\n\n  const flipKernel = createFLIPKernel(gpu, particleCount, cellSize).setPipeline(\n    true\n  );\n\n  return (\n    oldXVelocity,\n    oldYVelocity,\n    oldZVelocity,\n    newXVelocity,\n    newYVelocity,\n    newZVelocity,\n    particles\n  ) =>\n    flipKernel(\n      particles,\n      velocityXDifference(oldXVelocity, newXVelocity),\n      velocityYDifference(oldYVelocity, newYVelocity),\n      velocityZDifference(oldZVelocity, newZVelocity),\n      oldXVelocity,\n      oldYVelocity,\n      oldZVelocity\n    );\n};\n","/**\n * Component-wise add two vectors.\n */\nexport const createComponentWiseAddKernel = (gpu, vectorLength) =>\n  gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x] + b[this.thread.x];\n    })\n    .setTactic(\"precision\") // vector math should be high precision\n    .setOutput([vectorLength]);\n\n/**\n * Component-wise multiply two vectors.\n */\nexport const createComponentWiseMultiplyKernel = (gpu, vectorLength) =>\n  gpu\n    .createKernel(function (a, b) {\n      return a[this.thread.x] * b[this.thread.x];\n    })\n    .setTactic(\"precision\") // vector math should be high precision\n    .setOutput([vectorLength]);\n\n/**\n * Muliply a vector `a` by a scalar.\n */\nexport const createScalarMultiplyKernel = (gpu, vectorLength) =>\n  gpu\n    .createKernel(function (a, scalar) {\n      return scalar * a[this.thread.x];\n    })\n    .setTactic(\"precision\") // vector math should be high precision\n    .setOutput([vectorLength]);\n","import { FLUID_DENSITY } from \"../../simulation.js\";\nimport { STATE_ENUM } from \"../../mac-grid.js\";\n\n/**\n * Assumption!\n * As long as there is the default solid walls around the fluid, edge cases\n * will be fine. Otherwise, this will need to be modified to support more\n * complex boundary conditions.\n */\n\nexport const createADiagKernel = (gpu, nx, ny, nz, cellSize) =>\n  gpu\n    .createKernel(function (voxelStates, dt) {\n      // for brevity\n      const i = this.thread.x;\n      const j = this.thread.y;\n      const k = this.thread.z;\n      const FLUID = this.constants.FLUID;\n      const AIR = this.constants.AIR;\n\n      // only consider fluid cells\n      if (voxelStates[k][j][i] !== FLUID) {\n        return 0;\n      }\n\n      const scale =\n        dt /\n        (this.constants.FLUID_DENSITY *\n          this.constants.CELL_SIZE *\n          this.constants.CELL_SIZE);\n\n      let accumulator = 0;\n\n      // negative x neighbor\n      if (voxelStates[k][j][i - 1] === FLUID) {\n        accumulator += scale;\n      }\n      // positive x neighbor\n      if (\n        voxelStates[k][j][i + 1] === FLUID ||\n        voxelStates[k][j][i + 1] === AIR\n      ) {\n        accumulator += scale;\n      }\n\n      // negative y neighbor\n      if (voxelStates[k][j - 1][i] === FLUID) {\n        accumulator += scale;\n      }\n      // positive y neighbor\n      if (\n        voxelStates[k][j + 1][i] === FLUID ||\n        voxelStates[k][j + 1][i] === AIR\n      ) {\n        accumulator += scale;\n      }\n\n      // negative z neighbor\n      if (voxelStates[k - 1][j][i] === FLUID) {\n        accumulator += scale;\n      }\n      // positive z neighbor\n      if (\n        voxelStates[k + 1][j][i] === FLUID ||\n        voxelStates[k + 1][j][i] === AIR\n      ) {\n        accumulator += scale;\n      }\n\n      return accumulator;\n    })\n    .setTactic(\"precision\") // vector math should be high precision\n    .setConstants({\n      CELL_SIZE: cellSize,\n      FLUID_DENSITY: FLUID_DENSITY,\n      AIR: STATE_ENUM.AIR,\n      FLUID: STATE_ENUM.FLUID,\n      SOLID: STATE_ENUM.SOLID,\n    })\n    .setOutput([nx, ny, nz]);\n\nexport const createAXKernel = (gpu, nx, ny, nz, cellSize) =>\n  gpu\n    .createKernel(function (voxelStates, dt) {\n      // for brevity\n      const i = this.thread.x;\n      const j = this.thread.y;\n      const k = this.thread.z;\n      const FLUID = this.constants.FLUID;\n\n      // only consider fluid cells\n      if (voxelStates[k][j][i] !== FLUID) {\n        return 0;\n      }\n\n      const scale =\n        dt /\n        (this.constants.FLUID_DENSITY *\n          this.constants.CELL_SIZE *\n          this.constants.CELL_SIZE);\n\n      let accumulator = 0;\n      //positive x neighbor\n      if (voxelStates[k][j][i + 1] === FLUID) {\n        accumulator = -scale;\n      }\n      return accumulator;\n    })\n    .setTactic(\"precision\") // vector math should be high precision\n    .setConstants({\n      CELL_SIZE: cellSize,\n      FLUID_DENSITY: FLUID_DENSITY,\n      AIR: STATE_ENUM.AIR,\n      FLUID: STATE_ENUM.FLUID,\n      SOLID: STATE_ENUM.SOLID,\n    })\n    .setOutput([nx, ny, nz]);\n\nexport const createAYKernel = (gpu, nx, ny, nz, cellSize) =>\n  gpu\n    .createKernel(function (voxelStates, dt) {\n      // for brevity\n      const i = this.thread.x;\n      const j = this.thread.y;\n      const k = this.thread.z;\n      const FLUID = this.constants.FLUID;\n\n      // only consider fluid cells\n      if (voxelStates[k][j][i] !== FLUID) {\n        return 0;\n      }\n\n      const scale =\n        dt /\n        (this.constants.FLUID_DENSITY *\n          this.constants.CELL_SIZE *\n          this.constants.CELL_SIZE);\n\n      let accumulator = 0;\n      //positive y neighbor\n      if (voxelStates[k][j + 1][i] === FLUID) {\n        accumulator = -scale;\n      }\n      return accumulator;\n    })\n    .setTactic(\"precision\") // vector math should be high precision\n    .setConstants({\n      CELL_SIZE: cellSize,\n      FLUID_DENSITY: FLUID_DENSITY,\n      AIR: STATE_ENUM.AIR,\n      FLUID: STATE_ENUM.FLUID,\n      SOLID: STATE_ENUM.SOLID,\n    })\n    .setOutput([nx, ny, nz]);\n\nexport const createAZKernel = (gpu, nx, ny, nz, cellSize) =>\n  gpu\n    .createKernel(function (voxelStates, dt) {\n      // for brevity\n      const i = this.thread.x;\n      const j = this.thread.y;\n      const k = this.thread.z;\n      const FLUID = this.constants.FLUID;\n\n      // only consider fluid cells\n      if (voxelStates[k][j][i] !== FLUID) {\n        return 0;\n      }\n\n      const scale =\n        dt /\n        (this.constants.FLUID_DENSITY *\n          this.constants.CELL_SIZE *\n          this.constants.CELL_SIZE);\n\n      let accumulator = 0;\n      //positive z neighbor\n      if (voxelStates[k + 1][j][i] === FLUID) {\n        accumulator = -scale;\n      }\n      return accumulator;\n    })\n    .setTactic(\"precision\") // vector math should be high precision\n    .setConstants({\n      CELL_SIZE: cellSize,\n      FLUID_DENSITY: FLUID_DENSITY,\n      AIR: STATE_ENUM.AIR,\n      FLUID: STATE_ENUM.FLUID,\n      SOLID: STATE_ENUM.SOLID,\n    })\n    .setOutput([nx, ny, nz]);\n","import { STATE_ENUM } from \"../../mac-grid.js\";\n\nexport const createNegativeDivergenceKernel = (gpu, nx, ny, nz, cellSize) =>\n  gpu\n    .createKernel(function (voxelStates, velocityX, velocityY, velocityZ) {\n      // for brevity\n      const i = this.thread.x;\n      const j = this.thread.y;\n      const k = this.thread.z;\n\n      if (voxelStates[k][j][i] !== this.constants.FLUID) {\n        return 0;\n      }\n\n      const scale = 1.0 / this.constants.CELL_SIZE;\n\n      let divergence =\n        -scale *\n        (velocityX[k][j][i + 1] -\n          velocityX[k][j][i] +\n          velocityY[k][j + 1][i] -\n          velocityY[k][j][i] +\n          velocityZ[k + 1][j][i] -\n          velocityZ[k][j][i]);\n\n      // modifying RHS (divergence) to account for solid velocities\n      if (voxelStates[k][j][i - 1] === this.constants.SOLID) {\n        divergence -= scale * velocityX[k][j][i];\n      }\n      if (voxelStates[k][j][i + 1] === this.constants.SOLID) {\n        divergence += scale * velocityX[k][j][i + 1];\n      }\n\n      if (voxelStates[k][j - 1][i] === this.constants.SOLID) {\n        divergence -= scale * velocityY[k][j][i];\n      }\n      if (voxelStates[k][j + 1][i] === this.constants.SOLID) {\n        divergence += scale * velocityY[k][j + 1][i];\n      }\n\n      if (voxelStates[k - 1][j][i] === this.constants.SOLID) {\n        divergence -= scale * velocityZ[k][j][i];\n      }\n\n      if (voxelStates[k + 1][j][i] === this.constants.SOLID) {\n        divergence += scale * velocityZ[k + 1][j][i];\n      }\n\n      return divergence;\n    })\n    .setTactic(\"precision\") // vector math should be high precision\n    .setConstants({\n      CELL_SIZE: cellSize,\n      FLUID: STATE_ENUM.FLUID,\n      SOLID: STATE_ENUM.SOLID,\n    })\n    .setOutput([nx, ny, nz]);\n","/**\n * Map from 3D arrays to 1D vectors.\n *\n * To unflatten:\n * `(k * ny + i) * nx + j`\n */\nexport const createFlattenKernel = (gpu, nx, ny, nz) =>\n  gpu\n    .createKernel(function (array) {\n      const aux = this.thread.x % (this.constants.NX * this.constants.NY);\n      const i = Math.floor(aux / this.constants.NY);\n      const j = aux % this.constants.NX;\n      const k = Math.floor(\n        this.thread.x / (this.constants.NX * this.constants.NY)\n      );\n      return array[k][j][i];\n    })\n    .setTactic(\"precision\")\n    .setConstants({ NX: nx, NY: ny, NZ: nz })\n    .setOutput([nx * ny * nz]);\n\nexport const createUnflattenKernel = (gpu, nx, ny, nz) =>\n  gpu\n    .createKernel(function (flat) {\n      return flat[\n        (this.thread.z * this.constants.NY + this.thread.x) *\n          this.constants.NX +\n          this.thread.y\n      ];\n    })\n    .setTactic(\"precision\")\n    .setConstants({ NX: nx, NY: ny, NZ: nz })\n    .setOutput([nx, ny, nz]);\n","import { STATE_ENUM } from \"../../mac-grid.js\";\n\n/**\n * Produce the matrix-vector product `Ax` from the sparsely stored A and x.\n */\nexport const createApplyAKernel = (gpu, vectorLength, nx, ny, nz) =>\n  gpu\n    .createKernel(function (Adiag, Ax, Ay, Az, x, voxelStates) {\n      const aux = this.thread.x % (this.constants.NX * this.constants.NY);\n      const i = Math.floor(aux / this.constants.NY);\n      const j = aux % this.constants.NX;\n      const k = Math.floor(\n        this.thread.x / (this.constants.NX * this.constants.NY)\n      );\n\n      // only consider fluid cells\n      if (voxelStates[k][j][i] !== this.constants.FLUID) {\n        return 0;\n      }\n\n      let vectorIndex = this.thread.x;\n      let accumulator = Adiag[k][j][i] * x[vectorIndex];\n\n      // negative x neighbor\n      if (voxelStates[k][j][i - 1] === this.constants.FLUID) {\n        vectorIndex = gridToVectorIndex(i - 1, j, k);\n        accumulator += Ax[k][j][i - 1] * x[vectorIndex];\n      }\n      // positive x neighbor\n      if (voxelStates[k][j][i + 1] === this.constants.FLUID) {\n        vectorIndex = gridToVectorIndex(i + 1, j, k);\n        accumulator += Ax[k][j][i + 1] * x[vectorIndex];\n      }\n      // negative y neighbor\n      if (voxelStates[k][j - 1][i] === this.constants.FLUID) {\n        vectorIndex = gridToVectorIndex(i, j - 1, k);\n        accumulator += Ay[k][j - 1][i] * x[vectorIndex];\n      }\n      // positive y neighbor\n      if (voxelStates[k][j + 1][i] === this.constants.FLUID) {\n        vectorIndex = gridToVectorIndex(i, j + 1, k);\n        accumulator += Ay[k][j + 1][i] * x[vectorIndex];\n      }\n      // negative z neighbor\n      if (voxelStates[k - 1][j][i] === this.constants.FLUID) {\n        vectorIndex = gridToVectorIndex(i, j, k - 1);\n        accumulator += Az[k - 1][j][i] * x[vectorIndex];\n      }\n      // positive z neighbor\n      if (voxelStates[k + 1][j][i] === this.constants.FLUID) {\n        vectorIndex = gridToVectorIndex(i, j, k + 1);\n        accumulator += Az[k + 1][j][i] * x[vectorIndex];\n      }\n\n      return accumulator;\n    })\n    .addFunction(function gridToVectorIndex(i, j, k) {\n      return (k * this.constants.NY + i) * this.constants.NX + j;\n    })\n    .setTactic(\"precision\") // vector math should be high precision\n    .setConstants({\n      VECTOR_LENGTH: vectorLength,\n      NX: nx,\n      NY: ny,\n      NZ: nz,\n      FLUID: STATE_ENUM.FLUID,\n    })\n    .setOutput([vectorLength]);\n","import { STATE_ENUM } from \"../mac-grid.js\";\n\nexport const createVelocityXUpdateKernel = (\n  gpu,\n  nx,\n  ny,\n  nz,\n  fluidDensity,\n  cellSize\n) =>\n  gpu\n    .createKernel(function (velocity, pressure, voxelStates, dt) {\n      // only consider boundaries which have a fluid cell on at least one side\n      if (\n        this.thread.x === 0 ||\n        this.thread.x === this.constants.NX - 1 ||\n        !(\n          voxelStates[this.thread.z][this.thread.y][this.thread.x - 1] ===\n            this.constants.FLUID ||\n          voxelStates[this.thread.z][this.thread.y][this.thread.x] ===\n            this.constants.FLUID\n        )\n      ) {\n        return 0;\n      }\n\n      const pressureGradient =\n        (pressure[this.thread.z][this.thread.y][this.thread.x] -\n          pressure[this.thread.z][this.thread.y][this.thread.x - 1]) /\n        this.constants.CELL_SIZE;\n\n      const oldVelocity = velocity[this.thread.z][this.thread.y][this.thread.x];\n      const newVelocity =\n        oldVelocity - (dt * pressureGradient) / this.constants.FLUID_DENSITY;\n\n      return newVelocity;\n    })\n    .setConstants({\n      FLUID_DENSITY: fluidDensity,\n      CELL_SIZE: cellSize,\n      NX: nx,\n      NY: ny,\n      NZ: nz,\n      FLUID: STATE_ENUM.FLUID,\n    })\n    .setOutput([nx, ny, nz]);\n\nexport const createVelocityYUpdateKernel = (\n  gpu,\n  nx,\n  ny,\n  nz,\n  fluidDensity,\n  cellSize\n) =>\n  gpu\n    .createKernel(function (velocity, pressure, voxelStates, dt) {\n      // only consider boundaries which have a fluid cell on at least one side\n      if (\n        this.thread.y === 0 ||\n        this.thread.y === this.constants.NY - 1 ||\n        !(\n          voxelStates[this.thread.z][this.thread.y - 1][this.thread.x] ===\n            this.constants.FLUID ||\n          voxelStates[this.thread.z][this.thread.y][this.thread.x] ===\n            this.constants.FLUID\n        )\n      ) {\n        return 0;\n      }\n\n      const pressureGradient =\n        (pressure[this.thread.z][this.thread.y][this.thread.x] -\n          pressure[this.thread.z][this.thread.y - 1][this.thread.x]) /\n        this.constants.CELL_SIZE;\n\n      const oldVelocity = velocity[this.thread.z][this.thread.y][this.thread.x];\n      const newVelocity =\n        oldVelocity - (dt * pressureGradient) / this.constants.FLUID_DENSITY;\n\n      return newVelocity;\n    })\n    .setConstants({\n      FLUID_DENSITY: fluidDensity,\n      CELL_SIZE: cellSize,\n      NX: nx,\n      NY: ny,\n      NZ: nz,\n      FLUID: STATE_ENUM.FLUID,\n    })\n    .setOutput([nx, ny, nz]);\n\nexport const createVelocityZUpdateKernel = (\n  gpu,\n  nx,\n  ny,\n  nz,\n  fluidDensity,\n  cellSize\n) =>\n  gpu\n    .createKernel(function (velocity, pressure, voxelStates, dt) {\n      // only consider boundaries which have a fluid cell on at least one side\n      if (\n        this.thread.z === 0 ||\n        this.thread.z === this.constants.NZ - 1 ||\n        !(\n          voxelStates[this.thread.z - 1][this.thread.y][this.thread.x] ===\n            this.constants.FLUID ||\n          voxelStates[this.thread.z][this.thread.y][this.thread.x] ===\n            this.constants.FLUID\n        )\n      ) {\n        return 0;\n      }\n\n      const pressureGradient =\n        (pressure[this.thread.z][this.thread.y][this.thread.x] -\n          pressure[this.thread.z - 1][this.thread.y][this.thread.x]) /\n        this.constants.CELL_SIZE;\n\n      return (\n        velocity[this.thread.z][this.thread.y][this.thread.x] -\n        (dt * pressureGradient) / this.constants.FLUID_DENSITY\n      );\n    })\n    .setConstants({\n      FLUID_DENSITY: fluidDensity,\n      CELL_SIZE: cellSize,\n      NX: nx,\n      NY: ny,\n      NZ: nz,\n      FLUID: STATE_ENUM.FLUID,\n    })\n    .setOutput([nx, ny, nz]);\n","import { STATE_ENUM } from \"../../mac-grid.js\";\n\nexport const createJacobiIterationKernel = (gpu, nx, ny, nz) =>\n  gpu\n    .createKernel(function (negativeDivergence, pressure, voxelStates) {\n      const i = this.thread.x;\n      const j = this.thread.y;\n      const k = this.thread.z;\n\n      if (voxelStates[k][j][i] === this.constants.AIR) {\n        return 0;\n      } else if (voxelStates[k][j][i] === this.constants.SOLID) {\n        return 100;\n      }\n\n      const divergenceCenter = negativeDivergence[k][j][i];\n\n      let left = 0.0;\n      let right = 0.0;\n      let bottom = 0.0;\n      let top = 0.0;\n      let back = 0.0;\n      let front = 0.0;\n\n      // negative x neighbor\n      if (voxelStates[k][j][i - 1] === this.constants.FLUID) {\n        left = pressure[k][j][i - 1];\n      }\n      // positive x neighbor\n      if (voxelStates[k][j][i + 1] === this.constants.FLUID) {\n        right = pressure[k][j][i + 1];\n      }\n      // negative y neighbor\n      if (voxelStates[k][j - 1][i] === this.constants.FLUID) {\n        bottom = pressure[k][j - 1][i];\n      }\n      // positive y neighbor\n      if (voxelStates[k][j + 1][i] === this.constants.FLUID) {\n        top = pressure[k][j + 1][i];\n      }\n      // negative z neighbor\n      if (voxelStates[k - 1][j][i] === this.constants.FLUID) {\n        front = pressure[k - 1][j][i];\n      }\n      // positive z neighbor\n      if (voxelStates[k + 1][j][i] === this.constants.FLUID) {\n        back = pressure[k + 1][j][i];\n      }\n\n      return (\n        (left + right + bottom + top + back + front + divergenceCenter) / 6.0\n      );\n    })\n    .setTactic(\"precision\") // vector math should be high precision\n    .setConstants({\n      FLUID: STATE_ENUM.FLUID,\n      AIR: STATE_ENUM.AIR,\n      SOLID: STATE_ENUM.SOLID,\n    })\n    .setOutput([nx, ny, nz]);\n","import { createAddGravityKernel } from \"./add-gravity.js\";\nimport { createAdvectParticlesKernel } from \"./advect-particles.js\";\nimport { createClassifyVoxelsKernel } from \"./classify-voxels.js\";\nimport { createCopyKernel } from \"./copy-kernel.js\";\nimport {\n  createEnforceBoundaryXKernel,\n  createEnforceBoundaryYKernel,\n  createEnforceBoundaryZKernel,\n} from \"./enforce-boundary-conditions.js\";\nimport { createParticleToGridKernel } from \"./transfer-particle-to-grid.js\";\nimport { createGridToParticlesKernel } from \"./transfer-grid-to-particles.js\";\nimport {\n  createComponentWiseAddKernel,\n  createComponentWiseMultiplyKernel,\n  createScalarMultiplyKernel,\n} from \"./pressure-solve/vector-math.js\";\nimport {\n  createADiagKernel,\n  createAXKernel,\n  createAYKernel,\n  createAZKernel,\n} from \"./pressure-solve/build-coefficient-matrix.js\";\nimport { createNegativeDivergenceKernel } from \"./pressure-solve/negative-divergence.js\";\nimport {\n  createFlattenKernel,\n  createUnflattenKernel,\n} from \"./pressure-solve/flatten.js\";\nimport { createApplyAKernel } from \"./pressure-solve/apply-a.js\";\nimport {\n  createVelocityXUpdateKernel,\n  createVelocityYUpdateKernel,\n  createVelocityZUpdateKernel,\n} from \"./velocity-update.js\";\nimport { FLUID_DENSITY } from \"../simulation.js\";\nimport { createJacobiIterationKernel } from \"./pressure-solve/jacobi-iteration.js\";\n\nexport const compileKernels = (gpu, particles, grid) => {\n  const start = Date.now();\n\n  const gridSize = [grid.nx, grid.ny, grid.nz];\n  const velocityXSize = [grid.nx + 1, grid.ny, grid.nz];\n  const velocityYSize = [grid.nx, grid.ny + 1, grid.nz];\n  const velocityZSize = [grid.nx, grid.ny, grid.nz + 1];\n  const DIMENSION = { X: 0, Y: 1, Z: 2 };\n\n  // project particle velocities to the grid\n  const particleToXGrid = createParticleToGridKernel(\n    gpu,\n    particles.count(),\n    ...velocityXSize,\n    DIMENSION.X\n  );\n  const particleToYGrid = createParticleToGridKernel(\n    gpu,\n    particles.count(),\n    ...velocityYSize,\n    DIMENSION.Y\n  );\n  const particleToZGrid = createParticleToGridKernel(\n    gpu,\n    particles.count(),\n    ...velocityZSize,\n    DIMENSION.Z\n  );\n\n  // copy grid quantities to save\n  const copyPressure = createCopyKernel(gpu, ...gridSize);\n  const copyXVelocity = createCopyKernel(gpu, ...velocityXSize);\n  const copyYVelocity = createCopyKernel(gpu, ...velocityYSize);\n  const copyZVelocity = createCopyKernel(gpu, ...velocityZSize);\n\n  // mark cells as solid, fluid, or air\n  const classifyVoxels = createClassifyVoxelsKernel(\n    gpu,\n    particles.count(),\n    ...gridSize\n  );\n\n  // add gravitational influence\n  const addGravity = createAddGravityKernel(gpu, ...velocityYSize);\n\n  // enforce boundary conditions\n  const enforceXBoundary = createEnforceBoundaryXKernel(gpu, ...velocityXSize);\n  const enforceYBoundary = createEnforceBoundaryYKernel(gpu, ...velocityYSize);\n  const enforceZBoundary = createEnforceBoundaryZKernel(gpu, ...velocityZSize);\n\n  // do pressure solve\n\n  // build coefficient matrix\n  const buildADiag = createADiagKernel(gpu, ...gridSize, grid.cellSize);\n  const buildAX = createAXKernel(gpu, ...gridSize, grid.cellSize);\n  const buildAY = createAYKernel(gpu, ...gridSize, grid.cellSize);\n  const buildAZ = createAZKernel(gpu, ...gridSize, grid.cellSize);\n\n  // build negative divergence vector with boundary conditions\n  const buildD = createNegativeDivergenceKernel(\n    gpu,\n    ...gridSize,\n    grid.cellSize\n  );\n  const flatten = createFlattenKernel(gpu, ...gridSize);\n  const unflatten = createUnflattenKernel(gpu, ...gridSize);\n\n  // compile kernels to do vector operations\n  const pcgVectorLength = grid.nx * grid.ny * grid.nz;\n  const componentWiseAdd = createComponentWiseAddKernel(gpu, pcgVectorLength);\n  const componentWiseMultiply = createComponentWiseMultiplyKernel(\n    gpu,\n    pcgVectorLength\n  );\n  // implement dot product's sum portion on the CPU\n  const dot = (a, b) =>\n    componentWiseMultiply(a, b).reduce((sum, n) => sum + n, 0);\n  const scalarMultiply = createScalarMultiplyKernel(gpu, pcgVectorLength);\n  const applyA = createApplyAKernel(gpu, pcgVectorLength, ...gridSize);\n  const math = {\n    componentWiseAdd: componentWiseAdd.setPipeline(true).setImmutable(true),\n    dot: dot,\n    scalarMultiply: scalarMultiply.setPipeline(true).setImmutable(true),\n    applyA: applyA.setPipeline(true).setImmutable(true),\n  };\n\n  // PCG methods\n  const zeroVector = gpu\n    .createKernel(function () {\n      return 0;\n    })\n    .setOutput([pcgVectorLength]);\n\n  const jacobi = createJacobiIterationKernel(gpu, ...gridSize);\n\n  const pressureSolve = {\n    buildADiag: buildADiag.setPipeline(true),\n    buildAX: buildAX.setPipeline(true),\n    buildAY: buildAY.setPipeline(true),\n    buildAZ: buildAZ.setPipeline(true),\n    buildD: buildD.setPipeline(true).setImmutable(true),\n    flatten: flatten.setPipeline(true).setImmutable(true),\n    unflatten: unflatten.setPipeline(true),\n    math: math,\n    zeroVector: zeroVector.setPipeline(true).setImmutable(true),\n    jacobi: jacobi.setPipeline(true).setImmutable(true),\n  };\n\n  // update grid velocities using the pressure gradient\n  const updateVelocityX = createVelocityXUpdateKernel(\n    gpu,\n    ...velocityXSize,\n    FLUID_DENSITY,\n    grid.cellSize\n  );\n  const updateVelocityY = createVelocityYUpdateKernel(\n    gpu,\n    ...velocityYSize,\n    FLUID_DENSITY,\n    grid.cellSize\n  );\n  const updateVelocityZ = createVelocityZUpdateKernel(\n    gpu,\n    ...velocityZSize,\n    FLUID_DENSITY,\n    grid.cellSize\n  );\n\n  // update the velocities of the particles using PIC/FLIP\n  const gridToParticles = createGridToParticlesKernel(\n    gpu,\n    particles.count(),\n    ...gridSize,\n    grid.cellSize\n  );\n\n  // update the positions of the particles\n  const advectParticles = createAdvectParticlesKernel(\n    gpu,\n    particles.count(),\n    grid.cellSize,\n    ...gridSize\n  );\n\n  const end = Date.now();\n  console.log(`Kernels compiled in ${end - start} ms.`);\n\n  return {\n    particleToXGrid: particleToXGrid.setPipeline(true).setImmutable(true),\n    particleToYGrid: particleToYGrid.setPipeline(true).setImmutable(true),\n    particleToZGrid: particleToZGrid.setPipeline(true).setImmutable(true),\n    copyPressure: copyPressure.setPipeline(true).setImmutable(true),\n    copyXVelocity: copyXVelocity.setPipeline(true).setImmutable(true),\n    copyYVelocity: copyYVelocity.setPipeline(true).setImmutable(true),\n    copyZVelocity: copyZVelocity.setPipeline(true).setImmutable(true),\n    classifyVoxels: classifyVoxels.setPipeline(true).setImmutable(true),\n    addGravity: addGravity.setPipeline(true).setImmutable(true),\n    enforceXBoundary: enforceXBoundary.setPipeline(true).setImmutable(true),\n    enforceYBoundary: enforceYBoundary.setPipeline(true).setImmutable(true),\n    enforceZBoundary: enforceZBoundary.setPipeline(true).setImmutable(true),\n    gridToParticles: gridToParticles,\n    advectParticles: advectParticles.setPipeline(true).setImmutable(true),\n    pressureSolve: pressureSolve,\n    updateVelocityX: updateVelocityX.setPipeline(true).setImmutable(true),\n    updateVelocityY: updateVelocityY.setPipeline(true).setImmutable(true),\n    updateVelocityZ: updateVelocityZ.setPipeline(true).setImmutable(true),\n  };\n};\n","import { MACGrid } from \"./mac-grid.js\";\nimport { Particles } from \"./particles.js\";\nimport { solve } from \"./pressure-solve.js\";\nimport { compileKernels } from \"./kernels/kernels.js\";\n\nexport const FLUID_DENSITY = 3.97;\nconst SOLVER_TOLERANCE = 1e-4;\nconst SOLVER_ITERATION_LIMIT = 200;\n\nexport class Simulation {\n  constructor(gpu, config) {\n    this.particles = new Particles(\n      config.particleDensity,\n      config.particleBounds\n    );\n    this.grid = new MACGrid(\n      config.gridBounds,\n      1.0 / Math.cbrt(config.particleDensity)\n    );\n    this.kernels = compileKernels(gpu, this.particles, this.grid);\n  }\n\n  step(dt) {\n    let particleBufferCopy = new Float32Array(this.particles.particleBuffer);\n\n    // console.log(\"first particle y velocity:\");\n    // console.log(particleBufferCopy[4]);\n\n    // transfer particle velocities to the grid and interpolate\n    this.grid.velocityX = this.kernels.particleToXGrid(\n      particleBufferCopy,\n      this.grid.cellSize\n    );\n    this.grid.velocityY = this.kernels.particleToYGrid(\n      particleBufferCopy,\n      this.grid.cellSize\n    );\n    this.grid.velocityZ = this.kernels.particleToZGrid(\n      particleBufferCopy,\n      this.grid.cellSize\n    );\n\n    // console.log(\"before copy:\");\n    // console.log(this.grid.velocityY.toArray()[2][2][2]);\n    // copy grid values to store the old ones\n    this.grid.pressureOld = this.kernels.copyPressure(this.grid.pressure);\n    this.grid.velocityXOld = this.kernels.copyXVelocity(this.grid.velocityX);\n    this.grid.velocityYOld = this.kernels.copyYVelocity(this.grid.velocityY);\n    this.grid.velocityZOld = this.kernels.copyZVelocity(this.grid.velocityZ);\n\n    // mark cells as solid, fluid, or air\n    this.grid.voxelStates = this.kernels.classifyVoxels(\n      this.grid.voxelStates.toArray(),\n      particleBufferCopy,\n      this.grid.cellSize\n    );\n\n    // console.log(\"before gravity update:\");\n    // console.log(this.grid.velocityY.toArray()[2][2][2]);\n\n    // perform gravity update\n    this.grid.velocityY = this.kernels.addGravity(\n      this.grid.velocityY,\n      dt,\n      this.grid.voxelStates\n    );\n    // console.log(\"after:\");\n    // console.log(this.grid.velocityY.toArray()[2][2][2]);\n\n    // enforce boundary conditions\n    this.grid.velocityX = this.kernels.enforceXBoundary(this.grid.velocityX);\n    // this.grid.velocityY = this.kernels.enforceYBoundary(this.grid.velocityY);\n    this.grid.velocityZ = this.kernels.enforceZBoundary(this.grid.velocityZ);\n\n    // do the pressure solve with a zero divergence velocity field\n    this.grid.pressure = solve(\n      this.kernels.pressureSolve,\n      this.grid.voxelStates,\n      dt,\n      this.grid.velocityX,\n      this.grid.velocityY,\n      this.grid.velocityZ,\n      SOLVER_TOLERANCE,\n      SOLVER_ITERATION_LIMIT,\n      this.grid.pressure,\n      this.grid.pressureOld\n    );\n    // // console.log(\"pressure:\");\n    // // console.log(this.grid.pressure); //.toArray());\n\n    // update the velocity fields with the new pressure gradients\n    this.grid.velocityX = this.kernels.updateVelocityX(\n      this.grid.velocityX,\n      this.grid.pressure,\n      this.grid.voxelStates,\n      dt\n    );\n    // // console.log(\"old y velocity:\");\n    // // console.log(this.grid.velocityY); //.toArray());\n    this.grid.velocityY = this.kernels.updateVelocityY(\n      this.grid.velocityY,\n      this.grid.pressure,\n      this.grid.voxelStates,\n      dt\n    );\n    // // console.log(\"new y velocity:\");\n    // // console.log(this.grid.velocityY); //.toArray());\n    this.grid.velocityZ = this.kernels.updateVelocityZ(\n      this.grid.velocityZ,\n      this.grid.pressure,\n      this.grid.voxelStates,\n      dt\n    );\n\n    // enforce boundary conditions\n    this.grid.velocityX = this.kernels.enforceXBoundary(this.grid.velocityX);\n    this.grid.velocityY = this.kernels.enforceYBoundary(this.grid.velocityY);\n    this.grid.velocityZ = this.kernels.enforceZBoundary(this.grid.velocityZ);\n\n    // update the velocities of the particles\n    this.particles.particleBuffer = this.kernels\n      .gridToParticles(\n        this.grid.velocityXOld,\n        this.grid.velocityYOld,\n        this.grid.velocityZOld,\n        this.grid.velocityX,\n        this.grid.velocityY,\n        this.grid.velocityZ,\n        particleBufferCopy\n      )\n      .toArray();\n\n    // console.log(this.particles.get(566).y_velocity);\n\n    // advect the particles to find their new positions\n    this.particles.particleBuffer = this.kernels\n      .advectParticles(\n        new Float32Array(this.particles.particleBuffer),\n        dt,\n        this.grid.velocityX,\n        this.grid.velocityY,\n        this.grid.velocityZ\n      )\n      .toArray();\n  }\n}\n","/*\n * Copyright 2010, Google Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { vec3 } from \"gl-matrix\";\nimport { Simulation } from \"./simulation/simulation.js\";\n\nfunction RayMarchingEffect(resolution, density) {\n  var ext = gl.getExtension(\"OES_texture_float\");\n  if (!ext) {\n    alert(\"this machine or browser does not support OES_texture_float\");\n    return;\n  }\n\n  var arrays = tdl.primitives.createCube(1.0);\n  var program = tdl.programs.loadProgramFromScriptTags(\"ray_vs\", \"ray_fs\");\n  var textures = [new tdl.textures.ExternalTexture2D()];\n\n  var model = new tdl.models.Model(program, arrays, textures);\n\n  var size = resolution;\n\n  var size3 = size * size * size;\n  var max_tex_dim = 16384;\n  if (size3 > max_tex_dim * 4) {\n    alert(\"Resolution too high! Something's wrong.\");\n  }\n\n  var field = new Float32Array(max_tex_dim * 4);\n\n  var tex = textures[0].texture;\n  var tex_level = 0;\n  var tex_width = max_tex_dim;\n  var tex_height = 1;\n\n  gl.bindTexture(gl.TEXTURE_2D, tex);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n  var firstDraw = true;\n  var startTime = Date.now() / 1000;\n  var lastTime = startTime;\n\n  // const gpu = new GPU({ mode: \"cpu\" });\n  const gpu = new GPU();\n  const sim = new Simulation(gpu, {\n    particleDensity: density,\n    particleBounds: {\n      min: vec3.fromValues(0.3, 0.3, 0.3),\n      max: vec3.fromValues(0.7, 0.6, 0.7),\n    },\n    gridBounds: {\n      min: vec3.fromValues(0.1, 0.1, 0.1),\n      max: vec3.fromValues(0.9, 0.9, 0.9),\n    },\n  });\n\n  const fillField = gpu\n    .createKernel(function (balls, n, size, radius) {\n      let z = Math.floor(this.thread.x / (size * size));\n      let y = Math.floor(this.thread.x / size) % size;\n      let x = this.thread.x % size;\n      var z_w = z / size;\n      var y_w = y / size;\n      var x_w = x / size;\n      let closest = 0;\n      let best = 100000;\n      // if n too big will need to change loopmaxiterations\n      for (let i = 0; i < n; ++i) {\n        let cur =\n          (x_w - balls[i][0]) * (x_w - balls[i][0]) +\n          (y_w - balls[i][1]) * (y_w - balls[i][1]) +\n          (z_w - balls[i][2]) * (z_w - balls[i][2]);\n        if (cur < best) {\n          best = cur;\n          closest = i;\n        }\n      }\n\n      return (\n        Math.sqrt(\n          (x_w - balls[closest][0]) * (x_w - balls[closest][0]) +\n            (y_w - balls[closest][1]) * (y_w - balls[closest][1]) +\n            (z_w - balls[closest][2]) * (z_w - balls[closest][2])\n        ) - radius\n      );\n    })\n    .setLoopMaxIterations(10000)\n    .setPipeline(true)\n    .setOutput([max_tex_dim * 4]);\n\n  const smooth = gpu\n    .createKernel(function (field, size, coefficient) {\n      let z_c = Math.floor(this.thread.x / (size * size));\n      let y_c = Math.floor(this.thread.x / size) % size;\n      let x_c = this.thread.x % size;\n\n      let sum = 0;\n      let count = 0.001; // weight must be nonzero\n      let r = 2;\n      for (let z_o = -r; z_o <= r; ++z_o) {\n        for (let y_o = -r; y_o <= r; ++y_o) {\n          for (let x_o = -r; x_o <= r; ++x_o) {\n            let x = x_c + x_o;\n            let y = y_c + y_o;\n            let z = z_c + z_o;\n\n            // Weighted by e^(-r^2 / c)\n            let w = Math.pow(\n              2.71,\n              (-1 * Math.sqrt(x_o * x_o + y_o * y_o + z_o * z_o)) / coefficient\n            );\n\n            if (\n              x < 0 ||\n              x > size - 1 ||\n              y < 0 ||\n              y > size - 1 ||\n              z < 0 ||\n              z > size - 1\n            ) {\n              // cheaper than continue, will try to read invalid data\n              w = 0.0;\n            }\n\n            sum += field[z * size * size + y * size + x] * w;\n            count += w;\n          }\n        }\n      }\n\n      return sum / count;\n    })\n    .setPipeline(true)\n    .setOutput([max_tex_dim * 4]);\n\n  this.render = function () {\n    gl.clearColor(0.0, 0.0, 0.0, 1);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.enable(gl.DEPTH_TEST);\n    gl.enable(gl.CULL_FACE);\n\n    let curTime = Date.now() / 1000;\n    let deltaTime = curTime - lastTime;\n    lastTime = curTime;\n\n    let localTime = Date.now() / 1000 - startTime;\n\n    // step the simulation forwards\n    deltaTime = Math.min(deltaTime, 1 / 60);\n    // if (localTime < 2) {\n    sim.step(deltaTime);\n    // }\n\n    var uniformsConst = {\n      u_field: textures[0],\n      time: localTime,\n    };\n\n    model.drawPrep(uniformsConst);\n\n    if (firstDraw) {\n      // Set firstDraw = false to only draw 1 frame\n\n      // Sine wave water\n      /*\n      let balls = [];\n      let n = 30;\n      let radius = 0.04;\n      \n      for (let x = 0; x < n; ++x) {\n        for (let z = 0; z < n; ++z) {\n          let xp = (x+0.5) / n;\n          let zp = (z+0.5) / n;\n          let r = Math.sqrt((xp-0.5) * (xp-0.5) + (zp-0.5) * (zp-0.5));\n          //let y = 0.1*((Math.sin(40 * r - 1.5*time) + 1) / 2) / Math.abs(10*(Math.max(r, 0.013))) + 0.05;\n          let y = 0.3 * Math.pow(Math.cos(10 * r - 1 * time), 2) / Math.max(10*r, 0.5) + 0.05;\n          balls.push([xp, y, zp]);\n        }\n      }\n      */\n\n      let balls = [];\n      //let radius = 0.04;\n      let radius = window.radiusSlider.value / 100;\n      for (let i = 0; i < sim.particles.particleBuffer.length; i += 6) {\n        balls.push([\n          sim.particles.particleBuffer[i],\n          sim.particles.particleBuffer[i + 1],\n          sim.particles.particleBuffer[i + 2],\n        ]);\n      }\n\n      // Swap comment to see with / without smoothing\n      //field = fillField(balls, balls.length, size, radius).toArray();\n      field = smooth(\n        fillField(balls, balls.length, size, radius),\n        size,\n        Math.max(0.001, window.smoothSlider.value)\n      ).toArray();\n    }\n\n    // Send the field to GPU, issue draw\n    imm.begin(gl.TRIANGLES, program);\n\n    gl.bindTexture(gl.TEXTURE_2D, tex);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      tex_level,\n      gl.RGBA,\n      tex_width,\n      tex_height,\n      0,\n      gl.RGBA,\n      gl.FLOAT,\n      field\n    );\n\n    gl.activeTexture(gl.TEXTURE0);\n\n    imm.quad2d(-1, -1, 2, 2, 1);\n    imm.end();\n  };\n}\n\nwindow.RayMarchingEffect = RayMarchingEffect;\n"],"names":["glMatrix.ARRAY_TYPE","vec3.set","vec3.create","vec3.sub","vec3.scale","vec3.add","vec3.fromValues","vec3.floor"],"mappings":"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"}