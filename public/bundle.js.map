{"version":3,"file":"bundle.js","sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/vec3.js","../src/utils.js","../src/simulation/mac-grid.js","../src/simulation/particles.js","../src/simulation/pressure-solve.js","../src/simulation/kernels/add-gravity.js","../src/simulation/kernels/advect-particles.js","../src/simulation/kernels/classify-voxels.js","../src/simulation/kernels/copy-kernel.js","../src/simulation/kernels/enforce-boundary-conditions.js","../src/simulation/kernels/transfer-particle-to-grid.js","../src/simulation/kernels/transfer-grid-to-particles.js","../src/simulation/kernels/pressure-solve/vector-math.js","../src/simulation/kernels/pressure-solve/build-coefficient-matrix.js","../src/simulation/kernels/pressure-solve/negative-divergence.js","../src/simulation/kernels/pressure-solve/flatten.js","../src/simulation/kernels/pressure-solve/apply-a.js","../src/simulation/kernels/velocity-update.js","../src/simulation/kernels/pressure-solve/jacobi-iteration.js","../src/simulation/kernels/kernels.js","../src/simulation/simulation.js","../src/main.js"],"sourcesContent":["/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","/**\r\n * Create a new 3D array of zeros with the given dimensions.\r\n *\r\n * @param {number} x x dimension length\r\n * @param {number} y y dimension length\r\n * @param {number} z z dimension length\r\n * @returns The new array, all values set to zero.\r\n */\r\nexport const initialize3DArray = (x, y, z) => {\r\n  let a = [];\r\n  for (let i = 0; i < x; i++) {\r\n    a.push([]);\r\n    for (let j = 0; j < y; j++) {\r\n      a[i].push(new Float32Array(z));\r\n    }\r\n  }\r\n  a.toArray = function() {return this;}\r\n  return a;\r\n};\r\n","import { vec3 } from \"gl-matrix\";\r\nimport { initialize3DArray } from \"../utils.js\";\r\n\r\n/** Enum for voxel states. */\r\nexport const STATE_ENUM = {\r\n  AIR: 0,\r\n  FLUID: 1,\r\n  SOLID: 2,\r\n};\r\n\r\n/**\r\n * Represent a MAC grid and the quantities associated with it. See Bridson,\r\n * 2015, chapter 2 for details on the structure of the grid. Pressures are\r\n * stored at the center of each voxel, and normal velocities are stored at the\r\n * boundaries on the voxels.\r\n */\r\nexport class MACGrid {\r\n  /**\r\n   * Construct a new MAC grid with the given specification. This grid\r\n   * construction is based off of Austin Eng's representation.\r\n   *\r\n   * @param {{min: vec3, max: vec3}} boundaries The bounds of the grid.\r\n   * @param {number} cellSize The width of each voxel.\r\n   */\r\n  constructor(boundaries, cellSize) {\r\n    this.min = boundaries.min;\r\n    this.max = boundaries.max;\r\n\r\n    // adjust the max extent to align to an integer number of cells\r\n    vec3.set(\r\n      this.max,\r\n      this.min[0] +\r\n        cellSize * Math.ceil((this.max[0] - this.min[0]) / cellSize),\r\n      this.min[1] +\r\n        cellSize * Math.ceil((this.max[1] - this.min[1]) / cellSize),\r\n      this.min[2] + cellSize * Math.ceil((this.max[2] - this.min[2]) / cellSize)\r\n    );\r\n\r\n    this.cellSize = cellSize;\r\n    this.count = vec3.create();\r\n    this.size = vec3.create();\r\n    vec3.sub(this.size, this.max, this.min);\r\n    vec3.scale(this.count, this.size, 1.0 / this.cellSize);\r\n    vec3.add(this.count, this.count, vec3.fromValues(1, 1, 1));\r\n    vec3.floor(this.count, this.count);\r\n\r\n    /// initialize\r\n    this.nx = this.count[0] - 1;\r\n    this.ny = this.count[1] - 1;\r\n    this.nz = this.count[2] - 1;\r\n    this.pressure = initialize3DArray(this.nx, this.ny, this.nz);\r\n    this.pressureOld = initialize3DArray(this.nx, this.ny, this.nz);\r\n    this.velocityX = null;\r\n    this.velocityXOld = null;\r\n    this.velocityY = null;\r\n    this.velocityYOld = null;\r\n    this.velocityZ = null;\r\n    this.velocityZOld = null;\r\n\r\n    // initialize voxel states\r\n    this.voxelStates = initialize3DArray(this.nx, this.ny, this.nz);\r\n\r\n    console.log(\r\n      `Created a MAC grid with dimensions (${this.nx}, ${this.ny}, ${this.nz}).`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set all voxels on the boundary of the grid to be solids. Leave everything\r\n   * else untouched (by default, air).\r\n   */\r\n  addDefaultSolids() {\r\n    for (let i = 0; i < this.nx; i++) {\r\n      for (let j = 0; j < this.ny; j++) {\r\n        for (let k = 0; k < this.nz; k++) {\r\n          if (\r\n            i === 0 ||\r\n            j === 0 ||\r\n            k === 0 ||\r\n            i === this.nx - 1 ||\r\n            j === this.ny - 1 ||\r\n            k === this.nz - 1\r\n          ) {\r\n            this.voxelStates[i][j][k] = STATE_ENUM.SOLID;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","export const ATTRIBUTE_COUNT = 6;\r\n\r\n/**\r\n * Represent the particle cloud.\r\n */\r\nexport class Particles {\r\n  /**\r\n   * Create a set of particles. The density of the particles determines how\r\n   * many are made, and the bounds determine the initial position of the\r\n   * particles. They start out evenly distributed throughout this box.\r\n   *\r\n   * @param {number} density\r\n   * @param {{min: vec3, max: vec3}} bounds The initial minimum and maximum\r\n   * extent of the box of particles.\r\n   */\r\n  constructor(density, bounds) {\r\n    this.particleBuffer = [];\r\n    this.particleIndices = [];\r\n    let particle_counter = 0;\r\n    let gap_between = 1 / Math.cbrt(density);\r\n    for (let x = bounds.min[0]; x < bounds.max[0]; x += gap_between) {\r\n      for (let y = bounds.min[1]; y < bounds.max[1]; y += gap_between) {\r\n        for (let z = bounds.min[2]; z < bounds.max[2]; z += gap_between) {\r\n          // push initial particle quantities\r\n          this.particleBuffer.push(x); // initial position\r\n          this.particleBuffer.push(y);\r\n          this.particleBuffer.push(z);\r\n          this.particleBuffer.push(0); // initial velocity\r\n          this.particleBuffer.push(0);\r\n          this.particleBuffer.push(0);\r\n\r\n          // push particles indices\r\n          this.particleIndices.push(particle_counter++ * ATTRIBUTE_COUNT);\r\n        }\r\n      }\r\n    }\r\n    console.log(`Created ${this.count()} particles.`);\r\n  }\r\n\r\n  /**\r\n   * @returns The count of particles in the cloud.\r\n   */\r\n  count() {\r\n    return this.particleBuffer.length / ATTRIBUTE_COUNT;\r\n  }\r\n\r\n  /**\r\n   * Get the ith particle from the buffer.\r\n   *\r\n   * @param {number} i The index of the particle to retrieve.\r\n   * @returns The particle as an object.\r\n   */\r\n  get(i) {\r\n    if (i < 0 || i >= this.count()) {\r\n      console.error(\"Index out of bounds in particle buffer!\");\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      x_position: this.particleBuffer[ATTRIBUTE_COUNT * i],\r\n      y_position: this.particleBuffer[ATTRIBUTE_COUNT * i + 1],\r\n      z_position: this.particleBuffer[ATTRIBUTE_COUNT * i + 2],\r\n      x_velocity: this.particleBuffer[ATTRIBUTE_COUNT * i + 3],\r\n      y_velocity: this.particleBuffer[ATTRIBUTE_COUNT * i + 4],\r\n      z_velocity: this.particleBuffer[ATTRIBUTE_COUNT * i + 5],\r\n    };\r\n  }\r\n}\r\n","export const solve = (\r\n  kernels,\r\n  voxelStates,\r\n  dt,\r\n  velocityX,\r\n  velocityY,\r\n  velocityZ,\r\n  tolerance,\r\n  iterationLimit,\r\n  pressure,\r\n  pressureOld\r\n) => {\r\n  let p = pressureOld;\r\n\r\n  const d = kernels.buildD(voxelStates, velocityX, velocityY, velocityZ);\r\n\r\n  // JACOBI ITERATION\r\n  for (let i = 0; i < iterationLimit; i++) {\r\n    p = kernels.jacobi(d, p, voxelStates);\r\n  }\r\n\r\n  return p;\r\n};\r\n","export const createAddGravityKernel = (gpu, nx, ny, nz) =>\r\n  gpu\r\n    .createKernel(function (velocity_y, dt, voxelStates) {\r\n      return (\r\n        velocity_y[this.thread.z][this.thread.y][this.thread.x] - dt * 1.81\r\n      );\r\n    })\r\n    .setOutput([nx, ny, nz]);\r\n","import { ATTRIBUTE_COUNT } from \"../particles.js\";\r\n\r\nexport const createAdvectParticlesKernel = (\r\n  gpu,\r\n  particleCount,\r\n  cellSize,\r\n  nx,\r\n  ny,\r\n  nz\r\n) =>\r\n  gpu\r\n    .createKernel(function (\r\n      particles,\r\n      dt,\r\n      velocityFieldX,\r\n      velocityFieldY,\r\n      velocityFieldZ\r\n    ) {\r\n      // check which position component we're looking at\r\n      if (this.thread.x % this.constants.ATTRIBUTE_COUNT === 0) {\r\n        // get position\r\n        let x = particles[this.thread.x];\r\n        let y = particles[this.thread.x + 1];\r\n        let z = particles[this.thread.x + 2];\r\n\r\n        // get x velocity\r\n        let vx = particles[this.thread.x + 3];\r\n\r\n        return x + dt * vx;\r\n\r\n        // carry out 2nd order Runge-Kutta solver in one dimension\r\n        let k1 = dt * vx;\r\n        let xIntermediate = x + k1 / 2;\r\n\r\n        // interpolate the velocity at the intermediate x value\r\n        let lerpWeight =\r\n          (xIntermediate -\r\n            Math.floor(xIntermediate) * this.constants.CELL_SIZE) /\r\n          this.constants.CELL_SIZE;\r\n        let vxIntermediate = lerp(\r\n          velocityFieldX[Math.floor(z / this.constants.CELL_SIZE)][\r\n            Math.floor(y / this.constants.CELL_SIZE)\r\n          ][Math.floor(xIntermediate / this.constants.CELL_SIZE)],\r\n          velocityFieldX[Math.floor(z / this.constants.CELL_SIZE)][\r\n            Math.floor(y / this.constants.CELL_SIZE)\r\n          ][Math.ceil(xIntermediate / this.constants.CELL_SIZE)],\r\n          lerpWeight\r\n        );\r\n        let k2 = dt * vxIntermediate;\r\n        let projectedPosition = x + k2;\r\n        if (projectedPosition <= 0) {\r\n          projectedPosition = 0.01;\r\n        } else if (\r\n          projectedPosition >=\r\n          this.constants.NX * this.constants.CELL_SIZE\r\n        ) {\r\n          projectedPosition =\r\n            this.constants.NX * this.constants.CELL_SIZE - 0.01;\r\n        }\r\n        return projectedPosition;\r\n      } else if (this.thread.x % this.constants.ATTRIBUTE_COUNT === 1) {\r\n        // get position\r\n        let x = particles[this.thread.x - 1];\r\n        let y = particles[this.thread.x];\r\n        let z = particles[this.thread.x + 1];\r\n\r\n        // get y velocity\r\n        let vy = particles[this.thread.x + 3];\r\n\r\n        return y + dt * vy;\r\n\r\n        // carry out 2nd order Runge-Kutta solver in one dimension\r\n        let k1 = dt * vy;\r\n        let yIntermediate = y + k1 / 2;\r\n\r\n        // interpolate the velocity at the intermediate y value\r\n        let lerpWeight =\r\n          (yIntermediate -\r\n            Math.floor(yIntermediate) * this.constants.CELL_SIZE) /\r\n          this.constants.CELL_SIZE;\r\n        let vyIntermediate = lerp(\r\n          velocityFieldY[Math.floor(z / this.constants.CELL_SIZE)][\r\n            Math.floor(yIntermediate / this.constants.CELL_SIZE)\r\n          ][Math.floor(x / this.constants.CELL_SIZE)],\r\n          velocityFieldY[Math.floor(z / this.constants.CELL_SIZE)][\r\n            Math.ceil(yIntermediate / this.constants.CELL_SIZE)\r\n          ][Math.floor(x / this.constants.CELL_SIZE)],\r\n          lerpWeight\r\n        );\r\n        let k2 = dt * vyIntermediate;\r\n        let projectedPosition = y + k2;\r\n        if (projectedPosition <= 0) {\r\n          projectedPosition = 0.01;\r\n        } else if (\r\n          projectedPosition >=\r\n          this.constants.NY * this.constants.CELL_SIZE\r\n        ) {\r\n          projectedPosition =\r\n            this.constants.NY * this.constants.CELL_SIZE - 0.01;\r\n        }\r\n        return projectedPosition;\r\n      } else if (this.thread.x % this.constants.ATTRIBUTE_COUNT === 2) {\r\n        // get position\r\n        let x = particles[this.thread.x - 2];\r\n        let y = particles[this.thread.x - 1];\r\n        let z = particles[this.thread.x];\r\n\r\n        // get z velocity\r\n        let vz = particles[this.thread.x + 3];\r\n\r\n        return z + dt * vz;\r\n\r\n        // carry out 2nd order Runge-Kutta solver in one dimension\r\n        let k1 = dt * vz;\r\n        let zIntermediate = z + k1 / 2;\r\n\r\n        // interpolate the velocity at the intermediate z value\r\n        let lerpWeight =\r\n          (zIntermediate -\r\n            Math.floor(zIntermediate) * this.constants.CELL_SIZE) /\r\n          this.constants.CELL_SIZE;\r\n        let vzIntermediate = lerp(\r\n          velocityFieldZ[Math.floor(zIntermediate / this.constants.CELL_SIZE)][\r\n            Math.floor(y / this.constants.CELL_SIZE)\r\n          ][Math.floor(x / this.constants.CELL_SIZE)],\r\n          velocityFieldZ[Math.ceil(zIntermediate / this.constants.CELL_SIZE)][\r\n            Math.floor(y / this.constants.CELL_SIZE)\r\n          ][Math.floor(x / this.constants.CELL_SIZE)],\r\n          lerpWeight\r\n        );\r\n        let k2 = dt * vzIntermediate;\r\n        let projectedPosition = z + k2;\r\n        if (projectedPosition <= 0) {\r\n          projectedPosition = 0.01;\r\n        } else if (\r\n          projectedPosition >=\r\n          this.constants.NZ * this.constants.CELL_SIZE\r\n        ) {\r\n          projectedPosition =\r\n            this.constants.NZ * this.constants.CELL_SIZE - 0.01;\r\n        }\r\n        return projectedPosition;\r\n      } else {\r\n        // don't change the velocities\r\n        return particles[this.thread.x];\r\n      }\r\n    })\r\n    .addFunction(function lerp(a, b, t) {\r\n      return (1 - t) * a + t * b;\r\n    })\r\n    .setConstants({\r\n      ATTRIBUTE_COUNT: ATTRIBUTE_COUNT,\r\n      CELL_SIZE: cellSize,\r\n      NX: nx,\r\n      NY: ny,\r\n      NZ: nz,\r\n    })\r\n    .setOutput([ATTRIBUTE_COUNT * particleCount]);\r\n","import { STATE_ENUM } from \"../mac-grid.js\";\r\n\r\nexport const createClassifyVoxelsKernel = (gpu, particleCount, nx, ny, nz) =>\r\n  gpu\r\n    .createKernel(function (voxelStates, particles, cellSize) {\r\n      // get spatial location of grid\r\n      let x = cellSize * this.thread.x;\r\n      let y = cellSize * this.thread.y;\r\n      let z = cellSize * this.thread.z;\r\n\r\n      let particle_exists = false;\r\n      for (let i = 0; i < this.constants.particleCount; i++) {\r\n        let pos_x = particles[i * 6];\r\n        let pos_y = particles[i * 6 + 1];\r\n        let pos_z = particles[i * 6 + 2];\r\n        // check if there is a particle in that grid\r\n        if (\r\n          pos_x - x <= cellSize &&\r\n          pos_x - x > 0 &&\r\n          pos_y - y <= cellSize &&\r\n          pos_y - y > 0 &&\r\n          pos_z - z <= cellSize &&\r\n          pos_z - z > 0\r\n        ) {\r\n          particle_exists = true;\r\n          break;\r\n        }\r\n      }\r\n      // set any cell with a particle in it that isn't solid to fluid\r\n      // any cell without a particle or solid is air\r\n      if (particle_exists) {\r\n        if (\r\n          voxelStates[this.thread.z][this.thread.y][this.thread.x] !==\r\n          this.constants.SOLID\r\n        ) {\r\n          return this.constants.FLUID;\r\n        } else {\r\n          return this.constants.SOLID;\r\n        }\r\n      } else {\r\n        // if there isn't, and the state is fluid, flip it to air\r\n        if (\r\n          voxelStates[this.thread.z][this.thread.y][this.thread.x] !==\r\n          this.constants.SOLID\r\n        ) {\r\n          return this.constants.AIR;\r\n        } else {\r\n          return this.constants.SOLID;\r\n        }\r\n      }\r\n    })\r\n    .setConstants({\r\n      particleCount: particleCount,\r\n      AIR: STATE_ENUM.AIR,\r\n      FLUID: STATE_ENUM.FLUID,\r\n      SOLID: STATE_ENUM.SOLID,\r\n    })\r\n    .setOutput([nx, ny, nz]);\r\n","export const createCopyKernel = (gpu, nx, ny, nz) =>\r\n  gpu\r\n    .createKernel(function (array) {\r\n      return array[this.thread.z][this.thread.y][this.thread.x];\r\n    })\r\n    .setOutput([nx, ny, nz]);\r\n","/**\r\n * Assumption!\r\n * This assumes that we're using the default arrangement of having all solid\r\n * voxels around the edge of our rectangular domain.\r\n */\r\n\r\nexport const createEnforceBoundaryXKernel = (gpu, nx, ny, nz) =>\r\n  gpu\r\n    .createKernel(function (velocities) {\r\n      if (this.thread.x === 0 || this.thread.x === this.constants.nx - 1) {\r\n        return 0;\r\n      }\r\n      return velocities[this.thread.z][this.thread.y][this.thread.x];\r\n    })\r\n    .setConstants({ nx: nx })\r\n    .setOutput([nx, ny, nz]);\r\n\r\nexport const createEnforceBoundaryYKernel = (gpu, nx, ny, nz) =>\r\n  gpu\r\n    .createKernel(function (velocities) {\r\n      if (this.thread.y === 0 || this.thread.y === this.constants.ny - 1) {\r\n        return 0;\r\n      }\r\n      return velocities[this.thread.z][this.thread.y][this.thread.x];\r\n    })\r\n    .setConstants({ ny: ny })\r\n    .setOutput([nx, ny, nz]);\r\n\r\nexport const createEnforceBoundaryZKernel = (gpu, nx, ny, nz) =>\r\n  gpu\r\n    .createKernel(function (velocities) {\r\n      if (this.thread.z === 0 || this.thread.z === this.constants.nz - 1) {\r\n        return 0;\r\n      }\r\n      return velocities[this.thread.z][this.thread.y][this.thread.x];\r\n    })\r\n    .setConstants({ nz: nz })\r\n    .setOutput([nx, ny, nz]);\r\n","/**\r\n * Transfer particle velocities to the grid. See Bridson, section 7.6 on\r\n * particle methods.\r\n */\r\n\r\n/**\r\n * How to parallelize?\r\n *\r\n *\r\n * for each particle:\r\n *  - get position of particle\r\n *  - find grid edges within dx\r\n *  for each of these edges:\r\n *      - add velocity * weight\r\n *      - where weight is given as triangle function\r\n */\r\nexport const createParticleToGridKernel = (\r\n  gpu,\r\n  particleCount,\r\n  nx,\r\n  ny,\r\n  nz,\r\n  dimension\r\n) =>\r\n  gpu\r\n    .createKernel(function (particles, cellSize) {\r\n      // get spatial location of grid velocity vector\r\n      let x = cellSize * this.thread.x;\r\n      let y = cellSize * this.thread.y;\r\n      let z = cellSize * this.thread.z;\r\n\r\n      // declare numerator and denominator of the weighted sum\r\n      let numerator = 0;\r\n      let denominator = 0;\r\n      /* loop through particles to find ones that are close, add their\r\n      velocity contribution to the grid velocity */\r\n      for (\r\n        let particleIndex = 0;\r\n        particleIndex < this.constants.PARTICLE_COUNT;\r\n        particleIndex++\r\n      ) {\r\n        // calculate distance in each dimension\r\n        let distance_x = particles[particleIndex * 6] - x;\r\n        let distance_y = particles[particleIndex * 6 + 1] - y;\r\n        let distance_z = particles[particleIndex * 6 + 2] - z;\r\n\r\n        // if it's far, skip it\r\n        if (\r\n          Math.abs(distance_x) > cellSize ||\r\n          Math.abs(distance_y) > cellSize ||\r\n          Math.abs(distance_z) > cellSize\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        // calculate the weight according to the trilinear interpolation\r\n        let weight =\r\n          triangle(distance_x / cellSize) *\r\n          triangle(distance_y / cellSize) *\r\n          triangle(distance_z / cellSize);\r\n\r\n        numerator +=\r\n          particles[particleIndex * 6 + 3 + this.constants.DIMENSION] * weight;\r\n        denominator += weight;\r\n      }\r\n\r\n      // check for divide by zero\r\n      if (Math.abs(denominator) < 0.0001) {\r\n        return 0;\r\n      }\r\n      return numerator / denominator;\r\n    })\r\n    .addFunction(function triangle(r) {\r\n      let r_magnitude = Math.abs(r);\r\n      if (r_magnitude >= 1) {\r\n        return 0;\r\n      }\r\n      return 1 - r_magnitude;\r\n    })\r\n    .setConstants({ PARTICLE_COUNT: particleCount, DIMENSION: dimension })\r\n    .setOutput([nx, ny, nz]);\r\n","import { ATTRIBUTE_COUNT } from \"../particles.js\";\r\n\r\n// kernel for subracting the new grid velocities from the old grid velocities\r\nconst createGridVelocityDifferenceKernel = (gpu, nx, ny, nz) =>\r\n  gpu\r\n    .createKernel(function (oldVelocities, newVelocities) {\r\n      return (\r\n        newVelocities[this.thread.z][this.thread.y][this.thread.x] -\r\n        oldVelocities[this.thread.z][this.thread.y][this.thread.x]\r\n      );\r\n    })\r\n    .setOutput([nx, ny, nz]);\r\n\r\n// FLIP Kernel\r\nconst createFLIPKernel = (gpu, particleCount, cellSize) =>\r\n  gpu\r\n    .createKernel(function (\r\n      particles,\r\n      diffGridVx,\r\n      diffGridVy,\r\n      diffGridVz,\r\n      oldVx,\r\n      oldVy,\r\n      oldVz\r\n    ) {\r\n      // mod to figure out which index we are at (0-5) for each particle\r\n      let index_mod = this.thread.x % this.constants.ATTRIBUTE_COUNT;\r\n      // if we are looking at the position just return the position\r\n      if (index_mod === 0 || index_mod === 1 || index_mod === 2) {\r\n        return particles[this.thread.x];\r\n      }\r\n      // get the positions - index changes depending which velocity we are looking at\r\n      let pos_x = particles[this.thread.x - index_mod];\r\n      let pos_y = particles[this.thread.x - index_mod + 1];\r\n      let pos_z = particles[this.thread.x - index_mod + 2];\r\n      // get the lower and upper grid positions\r\n      let grid_lower_x = Math.floor(pos_x / this.constants.CELL_SIZE);\r\n      let grid_upper_x = Math.ceil(pos_x / this.constants.CELL_SIZE);\r\n      let grid_lower_y = Math.floor(pos_y / this.constants.CELL_SIZE);\r\n      let grid_upper_y = Math.ceil(pos_y / this.constants.CELL_SIZE);\r\n      let grid_lower_z = Math.floor(pos_z / this.constants.CELL_SIZE);\r\n      let grid_upper_z = Math.ceil(pos_z / this.constants.CELL_SIZE);\r\n      if (index_mod === 3) {\r\n        // vx\r\n        // get the lerp weight and return the lerp'd velocity\r\n        let lerpWeight =\r\n          (pos_x - grid_lower_x * this.constants.CELL_SIZE) /\r\n          this.constants.CELL_SIZE;\r\n        return (\r\n          lerp(\r\n            oldVx[grid_lower_z][grid_lower_y][grid_lower_x],\r\n            oldVx[grid_lower_z][grid_lower_y][grid_upper_x],\r\n            lerpWeight\r\n          ) +\r\n          lerp(\r\n            diffGridVx[grid_lower_z][grid_lower_y][grid_lower_x],\r\n            diffGridVx[grid_lower_z][grid_lower_y][grid_upper_x],\r\n            lerpWeight\r\n          )\r\n        );\r\n      } else if (index_mod === 4) {\r\n        // vy\r\n        // get the lerp weight and return the lerp'd velocity\r\n        let lerpWeight =\r\n          (pos_y - grid_lower_y * this.constants.CELL_SIZE) /\r\n          this.constants.CELL_SIZE;\r\n        return (\r\n          lerp(\r\n            oldVy[grid_lower_z][grid_lower_y][grid_lower_x],\r\n            oldVy[grid_lower_z][grid_upper_y][grid_lower_x],\r\n            lerpWeight\r\n          ) +\r\n          lerp(\r\n            diffGridVy[grid_lower_z][grid_lower_y][grid_lower_x],\r\n            diffGridVy[grid_lower_z][grid_upper_y][grid_lower_x],\r\n            lerpWeight\r\n          )\r\n        );\r\n      } else if (index_mod === 5) {\r\n        // vz\r\n        // get the lerp weight and return the lerp'd velocity\r\n        let lerpWeight =\r\n          (pos_z - grid_lower_z * this.constants.CELL_SIZE) /\r\n          this.constants.CELL_SIZE;\r\n        return (\r\n          lerp(\r\n            oldVz[grid_lower_z][grid_lower_y][grid_lower_x],\r\n            oldVz[grid_upper_z][grid_lower_y][grid_lower_x],\r\n            lerpWeight\r\n          ) +\r\n          lerp(\r\n            diffGridVz[grid_lower_z][grid_lower_y][grid_lower_x],\r\n            diffGridVz[grid_upper_z][grid_lower_y][grid_lower_x],\r\n            lerpWeight\r\n          )\r\n        );\r\n      }\r\n    })\r\n    .addFunction(function lerp(a, b, t) {\r\n      return (1 - t) * a + t * b;\r\n    })\r\n    .setConstants({ ATTRIBUTE_COUNT: ATTRIBUTE_COUNT, CELL_SIZE: cellSize })\r\n    .setOutput([particleCount * ATTRIBUTE_COUNT]);\r\n\r\nexport const createGridToParticlesKernel = (\r\n  gpu,\r\n  particleCount,\r\n  nx,\r\n  ny,\r\n  nz,\r\n  cellSize\r\n) => {\r\n  const velocityXDifference = createGridVelocityDifferenceKernel(\r\n    gpu,\r\n    nx + 1,\r\n    ny,\r\n    nz\r\n  ).setPipeline(true);\r\n\r\n  const velocityYDifference = createGridVelocityDifferenceKernel(\r\n    gpu,\r\n    nx,\r\n    ny + 1,\r\n    nz\r\n  ).setPipeline(true);\r\n\r\n  const velocityZDifference = createGridVelocityDifferenceKernel(\r\n    gpu,\r\n    nx,\r\n    ny,\r\n    nz + 1\r\n  ).setPipeline(true);\r\n\r\n  const flipKernel = createFLIPKernel(gpu, particleCount, cellSize).setPipeline(\r\n    true\r\n  );\r\n\r\n  return (\r\n    oldXVelocity,\r\n    oldYVelocity,\r\n    oldZVelocity,\r\n    newXVelocity,\r\n    newYVelocity,\r\n    newZVelocity,\r\n    particles\r\n  ) =>\r\n    flipKernel(\r\n      particles,\r\n      velocityXDifference(oldXVelocity, newXVelocity),\r\n      velocityYDifference(oldYVelocity, newYVelocity),\r\n      velocityZDifference(oldZVelocity, newZVelocity),\r\n      oldXVelocity,\r\n      oldYVelocity,\r\n      oldZVelocity\r\n    );\r\n};\r\n","/**\r\n * Component-wise add two vectors.\r\n */\r\nexport const createComponentWiseAddKernel = (gpu, vectorLength) =>\r\n  gpu\r\n    .createKernel(function (a, b) {\r\n      return a[this.thread.x] + b[this.thread.x];\r\n    })\r\n    .setTactic(\"precision\") // vector math should be high precision\r\n    .setOutput([vectorLength]);\r\n\r\n/**\r\n * Component-wise multiply two vectors.\r\n */\r\nexport const createComponentWiseMultiplyKernel = (gpu, vectorLength) =>\r\n  gpu\r\n    .createKernel(function (a, b) {\r\n      return a[this.thread.x] * b[this.thread.x];\r\n    })\r\n    .setTactic(\"precision\") // vector math should be high precision\r\n    .setOutput([vectorLength]);\r\n\r\n/**\r\n * Muliply a vector `a` by a scalar.\r\n */\r\nexport const createScalarMultiplyKernel = (gpu, vectorLength) =>\r\n  gpu\r\n    .createKernel(function (a, scalar) {\r\n      return scalar * a[this.thread.x];\r\n    })\r\n    .setTactic(\"precision\") // vector math should be high precision\r\n    .setOutput([vectorLength]);\r\n","import { FLUID_DENSITY } from \"../../simulation.js\";\r\nimport { STATE_ENUM } from \"../../mac-grid.js\";\r\n\r\n/**\r\n * Assumption!\r\n * As long as there is the default solid walls around the fluid, edge cases\r\n * will be fine. Otherwise, this will need to be modified to support more\r\n * complex boundary conditions.\r\n */\r\n\r\nexport const createADiagKernel = (gpu, nx, ny, nz, cellSize) =>\r\n  gpu\r\n    .createKernel(function (voxelStates, dt) {\r\n      // for brevity\r\n      const i = this.thread.x;\r\n      const j = this.thread.y;\r\n      const k = this.thread.z;\r\n      const FLUID = this.constants.FLUID;\r\n      const AIR = this.constants.AIR;\r\n\r\n      // only consider fluid cells\r\n      if (voxelStates[k][j][i] !== FLUID) {\r\n        return 0;\r\n      }\r\n\r\n      const scale =\r\n        dt /\r\n        (this.constants.FLUID_DENSITY *\r\n          this.constants.CELL_SIZE *\r\n          this.constants.CELL_SIZE);\r\n\r\n      let accumulator = 0;\r\n\r\n      // negative x neighbor\r\n      if (voxelStates[k][j][i - 1] === FLUID) {\r\n        accumulator += scale;\r\n      }\r\n      // positive x neighbor\r\n      if (\r\n        voxelStates[k][j][i + 1] === FLUID ||\r\n        voxelStates[k][j][i + 1] === AIR\r\n      ) {\r\n        accumulator += scale;\r\n      }\r\n\r\n      // negative y neighbor\r\n      if (voxelStates[k][j - 1][i] === FLUID) {\r\n        accumulator += scale;\r\n      }\r\n      // positive y neighbor\r\n      if (\r\n        voxelStates[k][j + 1][i] === FLUID ||\r\n        voxelStates[k][j + 1][i] === AIR\r\n      ) {\r\n        accumulator += scale;\r\n      }\r\n\r\n      // negative z neighbor\r\n      if (voxelStates[k - 1][j][i] === FLUID) {\r\n        accumulator += scale;\r\n      }\r\n      // positive z neighbor\r\n      if (\r\n        voxelStates[k + 1][j][i] === FLUID ||\r\n        voxelStates[k + 1][j][i] === AIR\r\n      ) {\r\n        accumulator += scale;\r\n      }\r\n\r\n      return accumulator;\r\n    })\r\n    .setTactic(\"precision\") // vector math should be high precision\r\n    .setConstants({\r\n      CELL_SIZE: cellSize,\r\n      FLUID_DENSITY: FLUID_DENSITY,\r\n      AIR: STATE_ENUM.AIR,\r\n      FLUID: STATE_ENUM.FLUID,\r\n      SOLID: STATE_ENUM.SOLID,\r\n    })\r\n    .setOutput([nx, ny, nz]);\r\n\r\nexport const createAXKernel = (gpu, nx, ny, nz, cellSize) =>\r\n  gpu\r\n    .createKernel(function (voxelStates, dt) {\r\n      // for brevity\r\n      const i = this.thread.x;\r\n      const j = this.thread.y;\r\n      const k = this.thread.z;\r\n      const FLUID = this.constants.FLUID;\r\n\r\n      // only consider fluid cells\r\n      if (voxelStates[k][j][i] !== FLUID) {\r\n        return 0;\r\n      }\r\n\r\n      const scale =\r\n        dt /\r\n        (this.constants.FLUID_DENSITY *\r\n          this.constants.CELL_SIZE *\r\n          this.constants.CELL_SIZE);\r\n\r\n      let accumulator = 0;\r\n      //positive x neighbor\r\n      if (voxelStates[k][j][i + 1] === FLUID) {\r\n        accumulator = -scale;\r\n      }\r\n      return accumulator;\r\n    })\r\n    .setTactic(\"precision\") // vector math should be high precision\r\n    .setConstants({\r\n      CELL_SIZE: cellSize,\r\n      FLUID_DENSITY: FLUID_DENSITY,\r\n      AIR: STATE_ENUM.AIR,\r\n      FLUID: STATE_ENUM.FLUID,\r\n      SOLID: STATE_ENUM.SOLID,\r\n    })\r\n    .setOutput([nx, ny, nz]);\r\n\r\nexport const createAYKernel = (gpu, nx, ny, nz, cellSize) =>\r\n  gpu\r\n    .createKernel(function (voxelStates, dt) {\r\n      // for brevity\r\n      const i = this.thread.x;\r\n      const j = this.thread.y;\r\n      const k = this.thread.z;\r\n      const FLUID = this.constants.FLUID;\r\n\r\n      // only consider fluid cells\r\n      if (voxelStates[k][j][i] !== FLUID) {\r\n        return 0;\r\n      }\r\n\r\n      const scale =\r\n        dt /\r\n        (this.constants.FLUID_DENSITY *\r\n          this.constants.CELL_SIZE *\r\n          this.constants.CELL_SIZE);\r\n\r\n      let accumulator = 0;\r\n      //positive y neighbor\r\n      if (voxelStates[k][j + 1][i] === FLUID) {\r\n        accumulator = -scale;\r\n      }\r\n      return accumulator;\r\n    })\r\n    .setTactic(\"precision\") // vector math should be high precision\r\n    .setConstants({\r\n      CELL_SIZE: cellSize,\r\n      FLUID_DENSITY: FLUID_DENSITY,\r\n      AIR: STATE_ENUM.AIR,\r\n      FLUID: STATE_ENUM.FLUID,\r\n      SOLID: STATE_ENUM.SOLID,\r\n    })\r\n    .setOutput([nx, ny, nz]);\r\n\r\nexport const createAZKernel = (gpu, nx, ny, nz, cellSize) =>\r\n  gpu\r\n    .createKernel(function (voxelStates, dt) {\r\n      // for brevity\r\n      const i = this.thread.x;\r\n      const j = this.thread.y;\r\n      const k = this.thread.z;\r\n      const FLUID = this.constants.FLUID;\r\n\r\n      // only consider fluid cells\r\n      if (voxelStates[k][j][i] !== FLUID) {\r\n        return 0;\r\n      }\r\n\r\n      const scale =\r\n        dt /\r\n        (this.constants.FLUID_DENSITY *\r\n          this.constants.CELL_SIZE *\r\n          this.constants.CELL_SIZE);\r\n\r\n      let accumulator = 0;\r\n      //positive z neighbor\r\n      if (voxelStates[k + 1][j][i] === FLUID) {\r\n        accumulator = -scale;\r\n      }\r\n      return accumulator;\r\n    })\r\n    .setTactic(\"precision\") // vector math should be high precision\r\n    .setConstants({\r\n      CELL_SIZE: cellSize,\r\n      FLUID_DENSITY: FLUID_DENSITY,\r\n      AIR: STATE_ENUM.AIR,\r\n      FLUID: STATE_ENUM.FLUID,\r\n      SOLID: STATE_ENUM.SOLID,\r\n    })\r\n    .setOutput([nx, ny, nz]);\r\n","import { STATE_ENUM } from \"../../mac-grid.js\";\r\n\r\nexport const createNegativeDivergenceKernel = (gpu, nx, ny, nz, cellSize) =>\r\n  gpu\r\n    .createKernel(function (voxelStates, velocityX, velocityY, velocityZ) {\r\n      // for brevity\r\n      const i = this.thread.x;\r\n      const j = this.thread.y;\r\n      const k = this.thread.z;\r\n\r\n      if (voxelStates[k][j][i] !== this.constants.FLUID) {\r\n        return 0;\r\n      }\r\n\r\n      const scale = 1.0 / this.constants.CELL_SIZE;\r\n\r\n      let divergence =\r\n        -scale *\r\n        (velocityX[k][j][i + 1] -\r\n          velocityX[k][j][i] +\r\n          velocityY[k][j + 1][i] -\r\n          velocityY[k][j][i] +\r\n          velocityZ[k + 1][j][i] -\r\n          velocityZ[k][j][i]);\r\n\r\n      // modifying RHS (divergence) to account for solid velocities\r\n      if (voxelStates[k][j][i - 1] === this.constants.SOLID) {\r\n        divergence -= scale * velocityX[k][j][i];\r\n      }\r\n      if (voxelStates[k][j][i + 1] === this.constants.SOLID) {\r\n        divergence += scale * velocityX[k][j][i + 1];\r\n      }\r\n\r\n      if (voxelStates[k][j - 1][i] === this.constants.SOLID) {\r\n        divergence -= scale * velocityY[k][j][i];\r\n      }\r\n      if (voxelStates[k][j + 1][i] === this.constants.SOLID) {\r\n        divergence += scale * velocityY[k][j + 1][i];\r\n      }\r\n\r\n      if (voxelStates[k - 1][j][i] === this.constants.SOLID) {\r\n        divergence -= scale * velocityZ[k][j][i];\r\n      }\r\n\r\n      if (voxelStates[k + 1][j][i] === this.constants.SOLID) {\r\n        divergence += scale * velocityZ[k + 1][j][i];\r\n      }\r\n\r\n      return divergence;\r\n    })\r\n    .setTactic(\"precision\") // vector math should be high precision\r\n    .setConstants({\r\n      CELL_SIZE: cellSize,\r\n      FLUID: STATE_ENUM.FLUID,\r\n      SOLID: STATE_ENUM.SOLID,\r\n    })\r\n    .setOutput([nx, ny, nz]);\r\n","/**\r\n * Map from 3D arrays to 1D vectors.\r\n *\r\n * To unflatten:\r\n * `(k * ny + i) * nx + j`\r\n */\r\nexport const createFlattenKernel = (gpu, nx, ny, nz) =>\r\n  gpu\r\n    .createKernel(function (array) {\r\n      const aux = this.thread.x % (this.constants.NX * this.constants.NY);\r\n      const i = Math.floor(aux / this.constants.NY);\r\n      const j = aux % this.constants.NX;\r\n      const k = Math.floor(\r\n        this.thread.x / (this.constants.NX * this.constants.NY)\r\n      );\r\n      return array[k][j][i];\r\n    })\r\n    .setTactic(\"precision\")\r\n    .setConstants({ NX: nx, NY: ny, NZ: nz })\r\n    .setOutput([nx * ny * nz]);\r\n\r\nexport const createUnflattenKernel = (gpu, nx, ny, nz) =>\r\n  gpu\r\n    .createKernel(function (flat) {\r\n      return flat[\r\n        (this.thread.z * this.constants.NY + this.thread.x) *\r\n          this.constants.NX +\r\n          this.thread.y\r\n      ];\r\n    })\r\n    .setTactic(\"precision\")\r\n    .setConstants({ NX: nx, NY: ny, NZ: nz })\r\n    .setOutput([nx, ny, nz]);\r\n","import { STATE_ENUM } from \"../../mac-grid.js\";\r\n\r\n/**\r\n * Produce the matrix-vector product `Ax` from the sparsely stored A and x.\r\n */\r\nexport const createApplyAKernel = (gpu, vectorLength, nx, ny, nz) =>\r\n  gpu\r\n    .createKernel(function (Adiag, Ax, Ay, Az, x, voxelStates) {\r\n      const aux = this.thread.x % (this.constants.NX * this.constants.NY);\r\n      const i = Math.floor(aux / this.constants.NY);\r\n      const j = aux % this.constants.NX;\r\n      const k = Math.floor(\r\n        this.thread.x / (this.constants.NX * this.constants.NY)\r\n      );\r\n\r\n      // only consider fluid cells\r\n      if (voxelStates[k][j][i] !== this.constants.FLUID) {\r\n        return 0;\r\n      }\r\n\r\n      let vectorIndex = this.thread.x;\r\n      let accumulator = Adiag[k][j][i] * x[vectorIndex];\r\n\r\n      // negative x neighbor\r\n      if (voxelStates[k][j][i - 1] === this.constants.FLUID) {\r\n        vectorIndex = gridToVectorIndex(i - 1, j, k);\r\n        accumulator += Ax[k][j][i - 1] * x[vectorIndex];\r\n      }\r\n      // positive x neighbor\r\n      if (voxelStates[k][j][i + 1] === this.constants.FLUID) {\r\n        vectorIndex = gridToVectorIndex(i + 1, j, k);\r\n        accumulator += Ax[k][j][i + 1] * x[vectorIndex];\r\n      }\r\n      // negative y neighbor\r\n      if (voxelStates[k][j - 1][i] === this.constants.FLUID) {\r\n        vectorIndex = gridToVectorIndex(i, j - 1, k);\r\n        accumulator += Ay[k][j - 1][i] * x[vectorIndex];\r\n      }\r\n      // positive y neighbor\r\n      if (voxelStates[k][j + 1][i] === this.constants.FLUID) {\r\n        vectorIndex = gridToVectorIndex(i, j + 1, k);\r\n        accumulator += Ay[k][j + 1][i] * x[vectorIndex];\r\n      }\r\n      // negative z neighbor\r\n      if (voxelStates[k - 1][j][i] === this.constants.FLUID) {\r\n        vectorIndex = gridToVectorIndex(i, j, k - 1);\r\n        accumulator += Az[k - 1][j][i] * x[vectorIndex];\r\n      }\r\n      // positive z neighbor\r\n      if (voxelStates[k + 1][j][i] === this.constants.FLUID) {\r\n        vectorIndex = gridToVectorIndex(i, j, k + 1);\r\n        accumulator += Az[k + 1][j][i] * x[vectorIndex];\r\n      }\r\n\r\n      return accumulator;\r\n    })\r\n    .addFunction(function gridToVectorIndex(i, j, k) {\r\n      return (k * this.constants.NY + i) * this.constants.NX + j;\r\n    })\r\n    .setTactic(\"precision\") // vector math should be high precision\r\n    .setConstants({\r\n      VECTOR_LENGTH: vectorLength,\r\n      NX: nx,\r\n      NY: ny,\r\n      NZ: nz,\r\n      FLUID: STATE_ENUM.FLUID,\r\n    })\r\n    .setOutput([vectorLength]);\r\n","import { STATE_ENUM } from \"../mac-grid.js\";\r\n\r\nexport const createVelocityXUpdateKernel = (\r\n  gpu,\r\n  nx,\r\n  ny,\r\n  nz,\r\n  fluidDensity,\r\n  cellSize\r\n) =>\r\n  gpu\r\n    .createKernel(function (velocity, pressure, voxelStates, dt) {\r\n      // only consider boundaries which have a fluid cell on at least one side\r\n      if (\r\n        this.thread.x === 0 ||\r\n        this.thread.x === this.constants.NX - 1 ||\r\n        !(\r\n          voxelStates[this.thread.z][this.thread.y][this.thread.x - 1] ===\r\n            this.constants.FLUID ||\r\n          voxelStates[this.thread.z][this.thread.y][this.thread.x] ===\r\n            this.constants.FLUID\r\n        )\r\n      ) {\r\n        return 0;\r\n      }\r\n\r\n      const pressureGradient =\r\n        (pressure[this.thread.z][this.thread.y][this.thread.x] -\r\n          pressure[this.thread.z][this.thread.y][this.thread.x - 1]) /\r\n        this.constants.CELL_SIZE;\r\n\r\n      const oldVelocity = velocity[this.thread.z][this.thread.y][this.thread.x];\r\n      const newVelocity =\r\n        oldVelocity - (dt * pressureGradient) / this.constants.FLUID_DENSITY;\r\n\r\n      return newVelocity;\r\n    })\r\n    .setConstants({\r\n      FLUID_DENSITY: fluidDensity,\r\n      CELL_SIZE: cellSize,\r\n      NX: nx,\r\n      NY: ny,\r\n      NZ: nz,\r\n      FLUID: STATE_ENUM.FLUID,\r\n    })\r\n    .setOutput([nx, ny, nz]);\r\n\r\nexport const createVelocityYUpdateKernel = (\r\n  gpu,\r\n  nx,\r\n  ny,\r\n  nz,\r\n  fluidDensity,\r\n  cellSize\r\n) =>\r\n  gpu\r\n    .createKernel(function (velocity, pressure, voxelStates, dt) {\r\n      // only consider boundaries which have a fluid cell on at least one side\r\n      if (\r\n        this.thread.y === 0 ||\r\n        this.thread.y === this.constants.NY - 1 ||\r\n        !(\r\n          voxelStates[this.thread.z][this.thread.y - 1][this.thread.x] ===\r\n            this.constants.FLUID ||\r\n          voxelStates[this.thread.z][this.thread.y][this.thread.x] ===\r\n            this.constants.FLUID\r\n        )\r\n      ) {\r\n        return 0;\r\n      }\r\n\r\n      const pressureGradient =\r\n        (pressure[this.thread.z][this.thread.y][this.thread.x] -\r\n          pressure[this.thread.z][this.thread.y - 1][this.thread.x]) /\r\n        this.constants.CELL_SIZE;\r\n\r\n      const oldVelocity = velocity[this.thread.z][this.thread.y][this.thread.x];\r\n      const newVelocity =\r\n        oldVelocity - (dt * pressureGradient) / this.constants.FLUID_DENSITY;\r\n\r\n      return newVelocity;\r\n    })\r\n    .setConstants({\r\n      FLUID_DENSITY: fluidDensity,\r\n      CELL_SIZE: cellSize,\r\n      NX: nx,\r\n      NY: ny,\r\n      NZ: nz,\r\n      FLUID: STATE_ENUM.FLUID,\r\n    })\r\n    .setOutput([nx, ny, nz]);\r\n\r\nexport const createVelocityZUpdateKernel = (\r\n  gpu,\r\n  nx,\r\n  ny,\r\n  nz,\r\n  fluidDensity,\r\n  cellSize\r\n) =>\r\n  gpu\r\n    .createKernel(function (velocity, pressure, voxelStates, dt) {\r\n      // only consider boundaries which have a fluid cell on at least one side\r\n      if (\r\n        this.thread.z === 0 ||\r\n        this.thread.z === this.constants.NZ - 1 ||\r\n        !(\r\n          voxelStates[this.thread.z - 1][this.thread.y][this.thread.x] ===\r\n            this.constants.FLUID ||\r\n          voxelStates[this.thread.z][this.thread.y][this.thread.x] ===\r\n            this.constants.FLUID\r\n        )\r\n      ) {\r\n        return 0;\r\n      }\r\n\r\n      const pressureGradient =\r\n        (pressure[this.thread.z][this.thread.y][this.thread.x] -\r\n          pressure[this.thread.z - 1][this.thread.y][this.thread.x]) /\r\n        this.constants.CELL_SIZE;\r\n\r\n      return (\r\n        velocity[this.thread.z][this.thread.y][this.thread.x] -\r\n        (dt * pressureGradient) / this.constants.FLUID_DENSITY\r\n      );\r\n    })\r\n    .setConstants({\r\n      FLUID_DENSITY: fluidDensity,\r\n      CELL_SIZE: cellSize,\r\n      NX: nx,\r\n      NY: ny,\r\n      NZ: nz,\r\n      FLUID: STATE_ENUM.FLUID,\r\n    })\r\n    .setOutput([nx, ny, nz]);\r\n","import { STATE_ENUM } from \"../../mac-grid.js\";\r\n\r\nexport const createJacobiIterationKernel = (gpu, nx, ny, nz) =>\r\n  gpu\r\n    .createKernel(function (negativeDivergence, pressure, voxelStates) {\r\n      const i = this.thread.x;\r\n      const j = this.thread.y;\r\n      const k = this.thread.z;\r\n\r\n      if (voxelStates[k][j][i] === this.constants.AIR) {\r\n        return 0;\r\n      } else if (voxelStates[k][j][i] === this.constants.SOLID) {\r\n        return 100;\r\n      }\r\n\r\n      const divergenceCenter = negativeDivergence[k][j][i];\r\n\r\n      let left = 0.0;\r\n      let right = 0.0;\r\n      let bottom = 0.0;\r\n      let top = 0.0;\r\n      let back = 0.0;\r\n      let front = 0.0;\r\n\r\n      // negative x neighbor\r\n      if (voxelStates[k][j][i - 1] === this.constants.FLUID) {\r\n        left = pressure[k][j][i - 1];\r\n      }\r\n      // positive x neighbor\r\n      if (voxelStates[k][j][i + 1] === this.constants.FLUID) {\r\n        right = pressure[k][j][i + 1];\r\n      }\r\n      // negative y neighbor\r\n      if (voxelStates[k][j - 1][i] === this.constants.FLUID) {\r\n        bottom = pressure[k][j - 1][i];\r\n      }\r\n      // positive y neighbor\r\n      if (voxelStates[k][j + 1][i] === this.constants.FLUID) {\r\n        top = pressure[k][j + 1][i];\r\n      }\r\n      // negative z neighbor\r\n      if (voxelStates[k - 1][j][i] === this.constants.FLUID) {\r\n        front = pressure[k - 1][j][i];\r\n      }\r\n      // positive z neighbor\r\n      if (voxelStates[k + 1][j][i] === this.constants.FLUID) {\r\n        back = pressure[k + 1][j][i];\r\n      }\r\n\r\n      return (\r\n        (left + right + bottom + top + back + front + divergenceCenter) / 6.0\r\n      );\r\n    })\r\n    .setTactic(\"precision\") // vector math should be high precision\r\n    .setConstants({\r\n      FLUID: STATE_ENUM.FLUID,\r\n      AIR: STATE_ENUM.AIR,\r\n      SOLID: STATE_ENUM.SOLID,\r\n    })\r\n    .setOutput([nx, ny, nz]);\r\n","import { createAddGravityKernel } from \"./add-gravity.js\";\r\nimport { createAdvectParticlesKernel } from \"./advect-particles.js\";\r\nimport { createClassifyVoxelsKernel } from \"./classify-voxels.js\";\r\nimport { createCopyKernel } from \"./copy-kernel.js\";\r\nimport {\r\n  createEnforceBoundaryXKernel,\r\n  createEnforceBoundaryYKernel,\r\n  createEnforceBoundaryZKernel,\r\n} from \"./enforce-boundary-conditions.js\";\r\nimport { createParticleToGridKernel } from \"./transfer-particle-to-grid.js\";\r\nimport { createGridToParticlesKernel } from \"./transfer-grid-to-particles.js\";\r\nimport {\r\n  createComponentWiseAddKernel,\r\n  createComponentWiseMultiplyKernel,\r\n  createScalarMultiplyKernel,\r\n} from \"./pressure-solve/vector-math.js\";\r\nimport {\r\n  createADiagKernel,\r\n  createAXKernel,\r\n  createAYKernel,\r\n  createAZKernel,\r\n} from \"./pressure-solve/build-coefficient-matrix.js\";\r\nimport { createNegativeDivergenceKernel } from \"./pressure-solve/negative-divergence.js\";\r\nimport {\r\n  createFlattenKernel,\r\n  createUnflattenKernel,\r\n} from \"./pressure-solve/flatten.js\";\r\nimport { createApplyAKernel } from \"./pressure-solve/apply-a.js\";\r\nimport {\r\n  createVelocityXUpdateKernel,\r\n  createVelocityYUpdateKernel,\r\n  createVelocityZUpdateKernel,\r\n} from \"./velocity-update.js\";\r\nimport { FLUID_DENSITY } from \"../simulation.js\";\r\nimport { createJacobiIterationKernel } from \"./pressure-solve/jacobi-iteration.js\";\r\n\r\nexport const compileKernels = (gpu, particles, grid) => {\r\n  const start = Date.now();\r\n\r\n  const gridSize = [grid.nx, grid.ny, grid.nz];\r\n  const velocityXSize = [grid.nx + 1, grid.ny, grid.nz];\r\n  const velocityYSize = [grid.nx, grid.ny + 1, grid.nz];\r\n  const velocityZSize = [grid.nx, grid.ny, grid.nz + 1];\r\n  const DIMENSION = { X: 0, Y: 1, Z: 2 };\r\n\r\n  // project particle velocities to the grid\r\n  const particleToXGrid = createParticleToGridKernel(\r\n    gpu,\r\n    particles.count(),\r\n    ...velocityXSize,\r\n    DIMENSION.X\r\n  );\r\n  const particleToYGrid = createParticleToGridKernel(\r\n    gpu,\r\n    particles.count(),\r\n    ...velocityYSize,\r\n    DIMENSION.Y\r\n  );\r\n  const particleToZGrid = createParticleToGridKernel(\r\n    gpu,\r\n    particles.count(),\r\n    ...velocityZSize,\r\n    DIMENSION.Z\r\n  );\r\n\r\n  // copy grid quantities to save\r\n  const copyPressure = createCopyKernel(gpu, ...gridSize);\r\n  const copyXVelocity = createCopyKernel(gpu, ...velocityXSize);\r\n  const copyYVelocity = createCopyKernel(gpu, ...velocityYSize);\r\n  const copyZVelocity = createCopyKernel(gpu, ...velocityZSize);\r\n\r\n  // mark cells as solid, fluid, or air\r\n  const classifyVoxels = createClassifyVoxelsKernel(\r\n    gpu,\r\n    particles.count(),\r\n    ...gridSize\r\n  );\r\n\r\n  // add gravitational influence\r\n  const addGravity = createAddGravityKernel(gpu, ...velocityYSize);\r\n\r\n  // enforce boundary conditions\r\n  const enforceXBoundary = createEnforceBoundaryXKernel(gpu, ...velocityXSize);\r\n  const enforceYBoundary = createEnforceBoundaryYKernel(gpu, ...velocityYSize);\r\n  const enforceZBoundary = createEnforceBoundaryZKernel(gpu, ...velocityZSize);\r\n\r\n  // do pressure solve\r\n\r\n  // build coefficient matrix\r\n  const buildADiag = createADiagKernel(gpu, ...gridSize, grid.cellSize);\r\n  const buildAX = createAXKernel(gpu, ...gridSize, grid.cellSize);\r\n  const buildAY = createAYKernel(gpu, ...gridSize, grid.cellSize);\r\n  const buildAZ = createAZKernel(gpu, ...gridSize, grid.cellSize);\r\n\r\n  // build negative divergence vector with boundary conditions\r\n  const buildD = createNegativeDivergenceKernel(\r\n    gpu,\r\n    ...gridSize,\r\n    grid.cellSize\r\n  );\r\n  const flatten = createFlattenKernel(gpu, ...gridSize);\r\n  const unflatten = createUnflattenKernel(gpu, ...gridSize);\r\n\r\n  // compile kernels to do vector operations\r\n  const pcgVectorLength = grid.nx * grid.ny * grid.nz;\r\n  const componentWiseAdd = createComponentWiseAddKernel(gpu, pcgVectorLength);\r\n  const componentWiseMultiply = createComponentWiseMultiplyKernel(\r\n    gpu,\r\n    pcgVectorLength\r\n  );\r\n  // implement dot product's sum portion on the CPU\r\n  const dot = (a, b) =>\r\n    componentWiseMultiply(a, b).reduce((sum, n) => sum + n, 0);\r\n  const scalarMultiply = createScalarMultiplyKernel(gpu, pcgVectorLength);\r\n  const applyA = createApplyAKernel(gpu, pcgVectorLength, ...gridSize);\r\n  const math = {\r\n    componentWiseAdd: componentWiseAdd.setPipeline(true).setImmutable(true),\r\n    dot: dot,\r\n    scalarMultiply: scalarMultiply.setPipeline(true).setImmutable(true),\r\n    applyA: applyA.setPipeline(true).setImmutable(true),\r\n  };\r\n\r\n  // PCG methods\r\n  const zeroVector = gpu\r\n    .createKernel(function () {\r\n      return 0;\r\n    })\r\n    .setOutput([pcgVectorLength]);\r\n\r\n  const jacobi = createJacobiIterationKernel(gpu, ...gridSize);\r\n\r\n  const pressureSolve = {\r\n    buildADiag: buildADiag.setPipeline(true),\r\n    buildAX: buildAX.setPipeline(true),\r\n    buildAY: buildAY.setPipeline(true),\r\n    buildAZ: buildAZ.setPipeline(true),\r\n    buildD: buildD.setPipeline(true).setImmutable(true),\r\n    flatten: flatten.setPipeline(true).setImmutable(true),\r\n    unflatten: unflatten.setPipeline(true),\r\n    math: math,\r\n    zeroVector: zeroVector.setPipeline(true).setImmutable(true),\r\n    jacobi: jacobi.setPipeline(true).setImmutable(true),\r\n  };\r\n\r\n  // update grid velocities using the pressure gradient\r\n  const updateVelocityX = createVelocityXUpdateKernel(\r\n    gpu,\r\n    ...velocityXSize,\r\n    FLUID_DENSITY,\r\n    grid.cellSize\r\n  );\r\n  const updateVelocityY = createVelocityYUpdateKernel(\r\n    gpu,\r\n    ...velocityYSize,\r\n    FLUID_DENSITY,\r\n    grid.cellSize\r\n  );\r\n  const updateVelocityZ = createVelocityZUpdateKernel(\r\n    gpu,\r\n    ...velocityZSize,\r\n    FLUID_DENSITY,\r\n    grid.cellSize\r\n  );\r\n\r\n  // update the velocities of the particles using PIC/FLIP\r\n  const gridToParticles = createGridToParticlesKernel(\r\n    gpu,\r\n    particles.count(),\r\n    ...gridSize,\r\n    grid.cellSize\r\n  );\r\n\r\n  // update the positions of the particles\r\n  const advectParticles = createAdvectParticlesKernel(\r\n    gpu,\r\n    particles.count(),\r\n    grid.cellSize,\r\n    ...gridSize\r\n  );\r\n\r\n  const end = Date.now();\r\n  console.log(`Kernels compiled in ${end - start} ms.`);\r\n\r\n  return {\r\n    particleToXGrid: particleToXGrid.setPipeline(true).setImmutable(true),\r\n    particleToYGrid: particleToYGrid.setPipeline(true).setImmutable(true),\r\n    particleToZGrid: particleToZGrid.setPipeline(true).setImmutable(true),\r\n    copyPressure: copyPressure.setPipeline(true).setImmutable(true),\r\n    copyXVelocity: copyXVelocity.setPipeline(true).setImmutable(true),\r\n    copyYVelocity: copyYVelocity.setPipeline(true).setImmutable(true),\r\n    copyZVelocity: copyZVelocity.setPipeline(true).setImmutable(true),\r\n    classifyVoxels: classifyVoxels.setPipeline(true).setImmutable(true),\r\n    addGravity: addGravity.setPipeline(true).setImmutable(true),\r\n    enforceXBoundary: enforceXBoundary.setPipeline(true).setImmutable(true),\r\n    enforceYBoundary: enforceYBoundary.setPipeline(true).setImmutable(true),\r\n    enforceZBoundary: enforceZBoundary.setPipeline(true).setImmutable(true),\r\n    gridToParticles: gridToParticles,\r\n    advectParticles: advectParticles.setPipeline(true).setImmutable(true),\r\n    pressureSolve: pressureSolve,\r\n    updateVelocityX: updateVelocityX.setPipeline(true).setImmutable(true),\r\n    updateVelocityY: updateVelocityY.setPipeline(true).setImmutable(true),\r\n    updateVelocityZ: updateVelocityZ.setPipeline(true).setImmutable(true),\r\n  };\r\n};\r\n","import { MACGrid } from \"./mac-grid.js\";\r\nimport { Particles } from \"./particles.js\";\r\nimport { solve } from \"./pressure-solve.js\";\r\nimport { compileKernels } from \"./kernels/kernels.js\";\r\n\r\nexport const FLUID_DENSITY = 3.97;\r\nconst SOLVER_TOLERANCE = 1e-4;\r\nconst SOLVER_ITERATION_LIMIT = 200;\r\n\r\nexport class Simulation {\r\n  constructor(gpu, config) {\r\n    this.particles = new Particles(\r\n      config.particleDensity,\r\n      config.particleBounds\r\n    );\r\n    this.grid = new MACGrid(\r\n      config.gridBounds,\r\n      1.0 / Math.cbrt(config.particleDensity)\r\n    );\r\n    this.kernels = compileKernels(gpu, this.particles, this.grid);\r\n  }\r\n\r\n  step(dt) {\r\n    let particleBufferCopy = new Float32Array(this.particles.particleBuffer);\r\n\r\n    // console.log(\"first particle y velocity:\");\r\n    // console.log(particleBufferCopy[4]);\r\n\r\n    // transfer particle velocities to the grid and interpolate\r\n    this.grid.velocityX = this.kernels.particleToXGrid(\r\n      particleBufferCopy,\r\n      this.grid.cellSize\r\n    );\r\n    this.grid.velocityY = this.kernels.particleToYGrid(\r\n      particleBufferCopy,\r\n      this.grid.cellSize\r\n    );\r\n    this.grid.velocityZ = this.kernels.particleToZGrid(\r\n      particleBufferCopy,\r\n      this.grid.cellSize\r\n    );\r\n\r\n    // console.log(\"before copy:\");\r\n    // console.log(this.grid.velocityY.toArray()[2][2][2]);\r\n    // copy grid values to store the old ones\r\n    this.grid.pressureOld = this.kernels.copyPressure(this.grid.pressure);\r\n    this.grid.velocityXOld = this.kernels.copyXVelocity(this.grid.velocityX);\r\n    this.grid.velocityYOld = this.kernels.copyYVelocity(this.grid.velocityY);\r\n    this.grid.velocityZOld = this.kernels.copyZVelocity(this.grid.velocityZ);\r\n\r\n    // mark cells as solid, fluid, or air\r\n    this.grid.voxelStates = this.kernels.classifyVoxels(\r\n      this.grid.voxelStates.toArray(),\r\n      particleBufferCopy,\r\n      this.grid.cellSize\r\n    );\r\n\r\n    // console.log(\"before gravity update:\");\r\n    // console.log(this.grid.velocityY.toArray()[2][2][2]);\r\n\r\n    // perform gravity update\r\n    this.grid.velocityY = this.kernels.addGravity(\r\n      this.grid.velocityY,\r\n      dt,\r\n      this.grid.voxelStates\r\n    );\r\n    // console.log(\"after:\");\r\n    // console.log(this.grid.velocityY.toArray()[2][2][2]);\r\n\r\n    // enforce boundary conditions\r\n    this.grid.velocityX = this.kernels.enforceXBoundary(this.grid.velocityX);\r\n    // this.grid.velocityY = this.kernels.enforceYBoundary(this.grid.velocityY);\r\n    this.grid.velocityZ = this.kernels.enforceZBoundary(this.grid.velocityZ);\r\n\r\n    // do the pressure solve with a zero divergence velocity field\r\n    this.grid.pressure = solve(\r\n      this.kernels.pressureSolve,\r\n      this.grid.voxelStates,\r\n      dt,\r\n      this.grid.velocityX,\r\n      this.grid.velocityY,\r\n      this.grid.velocityZ,\r\n      SOLVER_TOLERANCE,\r\n      SOLVER_ITERATION_LIMIT,\r\n      this.grid.pressure,\r\n      this.grid.pressureOld\r\n    );\r\n    // // console.log(\"pressure:\");\r\n    // // console.log(this.grid.pressure); //.toArray());\r\n\r\n    // update the velocity fields with the new pressure gradients\r\n    this.grid.velocityX = this.kernels.updateVelocityX(\r\n      this.grid.velocityX,\r\n      this.grid.pressure,\r\n      this.grid.voxelStates,\r\n      dt\r\n    );\r\n    // // console.log(\"old y velocity:\");\r\n    // // console.log(this.grid.velocityY); //.toArray());\r\n    this.grid.velocityY = this.kernels.updateVelocityY(\r\n      this.grid.velocityY,\r\n      this.grid.pressure,\r\n      this.grid.voxelStates,\r\n      dt\r\n    );\r\n    // // console.log(\"new y velocity:\");\r\n    // // console.log(this.grid.velocityY); //.toArray());\r\n    this.grid.velocityZ = this.kernels.updateVelocityZ(\r\n      this.grid.velocityZ,\r\n      this.grid.pressure,\r\n      this.grid.voxelStates,\r\n      dt\r\n    );\r\n\r\n    // enforce boundary conditions\r\n    this.grid.velocityX = this.kernels.enforceXBoundary(this.grid.velocityX);\r\n    this.grid.velocityY = this.kernels.enforceYBoundary(this.grid.velocityY);\r\n    this.grid.velocityZ = this.kernels.enforceZBoundary(this.grid.velocityZ);\r\n\r\n    // update the velocities of the particles\r\n    this.particles.particleBuffer = this.kernels\r\n      .gridToParticles(\r\n        this.grid.velocityXOld,\r\n        this.grid.velocityYOld,\r\n        this.grid.velocityZOld,\r\n        this.grid.velocityX,\r\n        this.grid.velocityY,\r\n        this.grid.velocityZ,\r\n        particleBufferCopy\r\n      )\r\n      .toArray();\r\n\r\n    // console.log(this.particles.get(566).y_velocity);\r\n\r\n    // advect the particles to find their new positions\r\n    this.particles.particleBuffer = this.kernels\r\n      .advectParticles(\r\n        new Float32Array(this.particles.particleBuffer),\r\n        dt,\r\n        this.grid.velocityX,\r\n        this.grid.velocityY,\r\n        this.grid.velocityZ\r\n      )\r\n      .toArray();\r\n  }\r\n}\r\n","/*\r\n * Copyright 2010, Google Inc.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are\r\n * met:\r\n *\r\n *     * Redistributions of source code must retain the above copyright\r\n * notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above\r\n * copyright notice, this list of conditions and the following disclaimer\r\n * in the documentation and/or other materials provided with the\r\n * distribution.\r\n *     * Neither the name of Google Inc. nor the names of its\r\n * contributors may be used to endorse or promote products derived from\r\n * this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport { vec3 } from \"gl-matrix\";\r\nimport { Simulation } from \"./simulation/simulation.js\";\r\n\r\nfunction RayMarchingEffect(resolution, density) {\r\n  var ext = gl.getExtension(\"OES_texture_float\");\r\n  if (!ext) {\r\n    alert(\"this machine or browser does not support OES_texture_float\");\r\n    return;\r\n  }\r\n\r\n  var arrays = tdl.primitives.createCube(1.0);\r\n  var program = tdl.programs.loadProgramFromScriptTags(\"ray_vs\", \"ray_fs\");\r\n  var textures = [new tdl.textures.ExternalTexture2D()];\r\n\r\n  var model = new tdl.models.Model(program, arrays, textures);\r\n\r\n  var size = resolution;\r\n\r\n  var size3 = size * size * size;\r\n  var max_tex_dim = 16384;\r\n  if (size3 > max_tex_dim * 4) {\r\n    alert(\"Resolution too high! Something's wrong.\");\r\n  }\r\n\r\n  var field = new Float32Array(max_tex_dim * 4);\r\n\r\n  var tex = textures[0].texture;\r\n  var tex_level = 0;\r\n  var tex_width = max_tex_dim;\r\n  var tex_height = 1;\r\n\r\n  gl.bindTexture(gl.TEXTURE_2D, tex);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\r\n  var firstDraw = true;\r\n  var startTime = Date.now() / 1000;\r\n  var lastTime = startTime;\r\n\r\n  // const gpu = new GPU({ mode: \"cpu\" });\r\n  const gpu = new GPU();\r\n  const sim = new Simulation(gpu, {\r\n    particleDensity: density,\r\n    particleBounds: {\r\n      min: vec3.fromValues(0.3, 0.3, 0.3),\r\n      max: vec3.fromValues(0.7, 0.6, 0.7),\r\n    },\r\n    gridBounds: {\r\n      min: vec3.fromValues(0.1, 0.1, 0.1),\r\n      max: vec3.fromValues(0.9, 0.9, 0.9),\r\n    },\r\n  });\r\n\r\n  const fillField = gpu\r\n    .createKernel(function (balls, n, size, radius) {\r\n      let z = Math.floor(this.thread.x / (size * size));\r\n      let y = Math.floor(this.thread.x / size) % size;\r\n      let x = this.thread.x % size;\r\n      var z_w = z / size;\r\n      var y_w = y / size;\r\n      var x_w = x / size;\r\n      let closest = 0;\r\n      let best = 100000;\r\n      // if n too big will need to change loopmaxiterations\r\n      for (let i = 0; i < n; ++i) {\r\n        let cur =\r\n          (x_w - balls[i][0]) * (x_w - balls[i][0]) +\r\n          (y_w - balls[i][1]) * (y_w - balls[i][1]) +\r\n          (z_w - balls[i][2]) * (z_w - balls[i][2]);\r\n        if (cur < best) {\r\n          best = cur;\r\n          closest = i;\r\n        }\r\n      }\r\n\r\n      return (\r\n        Math.sqrt(\r\n          (x_w - balls[closest][0]) * (x_w - balls[closest][0]) +\r\n            (y_w - balls[closest][1]) * (y_w - balls[closest][1]) +\r\n            (z_w - balls[closest][2]) * (z_w - balls[closest][2])\r\n        ) - radius\r\n      );\r\n    })\r\n    .setLoopMaxIterations(10000)\r\n    .setPipeline(true)\r\n    .setOutput([max_tex_dim * 4]);\r\n\r\n  const smooth = gpu\r\n    .createKernel(function (field, size, coefficient) {\r\n      let z_c = Math.floor(this.thread.x / (size * size));\r\n      let y_c = Math.floor(this.thread.x / size) % size;\r\n      let x_c = this.thread.x % size;\r\n\r\n      let sum = 0;\r\n      let count = 0.001; // weight must be nonzero\r\n      let r = 2;\r\n      for (let z_o = -r; z_o <= r; ++z_o) {\r\n        for (let y_o = -r; y_o <= r; ++y_o) {\r\n          for (let x_o = -r; x_o <= r; ++x_o) {\r\n            let x = x_c + x_o;\r\n            let y = y_c + y_o;\r\n            let z = z_c + z_o;\r\n\r\n            // Weighted by e^(-r^2 / c)\r\n            let w = Math.pow(\r\n              2.71,\r\n              (-1 * Math.sqrt(x_o * x_o + y_o * y_o + z_o * z_o)) / coefficient\r\n            );\r\n\r\n            if (\r\n              x < 0 ||\r\n              x > size - 1 ||\r\n              y < 0 ||\r\n              y > size - 1 ||\r\n              z < 0 ||\r\n              z > size - 1\r\n            ) {\r\n              // cheaper than continue, will try to read invalid data\r\n              w = 0.0;\r\n            }\r\n\r\n            sum += field[z * size * size + y * size + x] * w;\r\n            count += w;\r\n          }\r\n        }\r\n      }\r\n\r\n      return sum / count;\r\n    })\r\n    .setPipeline(true)\r\n    .setOutput([max_tex_dim * 4]);\r\n\r\n  this.render = function () {\r\n    gl.clearColor(0.0, 0.0, 0.0, 1);\r\n    gl.clearDepth(1.0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.CULL_FACE);\r\n\r\n    let curTime = Date.now() / 1000;\r\n    let deltaTime = curTime - lastTime;\r\n    lastTime = curTime;\r\n\r\n    let localTime = Date.now() / 1000 - startTime;\r\n\r\n    // step the simulation forwards\r\n    deltaTime = Math.min(deltaTime, 1 / 60);\r\n    // if (localTime < 2) {\r\n    sim.step(deltaTime);\r\n    // }\r\n\r\n    var uniformsConst = {\r\n      u_field: textures[0],\r\n      time: localTime,\r\n    };\r\n\r\n    model.drawPrep(uniformsConst);\r\n\r\n    if (firstDraw) {\r\n      // Set firstDraw = false to only draw 1 frame\r\n\r\n      // Sine wave water\r\n      /*\r\n      let balls = [];\r\n      let n = 30;\r\n      let radius = 0.04;\r\n      \r\n      for (let x = 0; x < n; ++x) {\r\n        for (let z = 0; z < n; ++z) {\r\n          let xp = (x+0.5) / n;\r\n          let zp = (z+0.5) / n;\r\n          let r = Math.sqrt((xp-0.5) * (xp-0.5) + (zp-0.5) * (zp-0.5));\r\n          //let y = 0.1*((Math.sin(40 * r - 1.5*time) + 1) / 2) / Math.abs(10*(Math.max(r, 0.013))) + 0.05;\r\n          let y = 0.3 * Math.pow(Math.cos(10 * r - 1 * time), 2) / Math.max(10*r, 0.5) + 0.05;\r\n          balls.push([xp, y, zp]);\r\n        }\r\n      }\r\n      */\r\n\r\n      let balls = [];\r\n      //let radius = 0.04;\r\n      let radius = window.radiusSlider.value / 100;\r\n      for (let i = 0; i < sim.particles.particleBuffer.length; i += 6) {\r\n        balls.push([\r\n          sim.particles.particleBuffer[i],\r\n          sim.particles.particleBuffer[i + 1],\r\n          sim.particles.particleBuffer[i + 2],\r\n        ]);\r\n      }\r\n\r\n      // Swap comment to see with / without smoothing\r\n      //field = fillField(balls, balls.length, size, radius).toArray();\r\n      field = smooth(\r\n        fillField(balls, balls.length, size, radius),\r\n        size,\r\n        Math.max(0.001, window.smoothSlider.value)\r\n      ).toArray();\r\n    }\r\n\r\n    // Send the field to GPU, issue draw\r\n    imm.begin(gl.TRIANGLES, program);\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, tex);\r\n    gl.texImage2D(\r\n      gl.TEXTURE_2D,\r\n      tex_level,\r\n      gl.RGBA,\r\n      tex_width,\r\n      tex_height,\r\n      0,\r\n      gl.RGBA,\r\n      gl.FLOAT,\r\n      field\r\n    );\r\n\r\n    gl.activeTexture(gl.TEXTURE0);\r\n\r\n    imm.quad2d(-1, -1, 2, 2, 1);\r\n    imm.end();\r\n  };\r\n}\r\n\r\nwindow.RayMarchingEffect = RayMarchingEffect;\r\n"],"names":["glMatrix.ARRAY_TYPE","vec3.set","vec3.create","vec3.sub","vec3.scale","vec3.add","vec3.fromValues","vec3.floor"],"mappings":"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"}